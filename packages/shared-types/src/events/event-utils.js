"use strict";
/**
 * Event Utilities
 * Helper functions and utilities for working with events
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEventId = createEventId;
exports.createCorrelationId = createCorrelationId;
exports.createDomainEvent = createDomainEvent;
exports.createIntegrationEvent = createIntegrationEvent;
exports.createEventEnvelope = createEventEnvelope;
exports.isValidEvent = isValidEvent;
exports.isDomainEvent = isDomainEvent;
exports.isIntegrationEvent = isIntegrationEvent;
exports.filterEventsByType = filterEventsByType;
exports.filterEventsByAggregateId = filterEventsByAggregateId;
exports.filterEventsByTimeRange = filterEventsByTimeRange;
exports.serializeEvent = serializeEvent;
exports.deserializeEvent = deserializeEvent;
exports.sortEventsByTimestamp = sortEventsByTimestamp;
exports.groupEventsByAggregateId = groupEventsByAggregateId;
exports.getLatestEventByAggregateId = getLatestEventByAggregateId;
exports.addEventMetadata = addEventMetadata;
exports.getEventMetadata = getEventMetadata;
exports.correlateEvents = correlateEvents;
exports.createEventChain = createEventChain;
// Event creation utilities
function createEventId() {
    return `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}
function createCorrelationId() {
    return `corr_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
}
function createDomainEvent(type, aggregateId, aggregateType, aggregateVersion, data, options) {
    return {
        id: createEventId(),
        type,
        version: '1.0',
        source: options?.source || 'madmall-platform',
        timestamp: new Date().toISOString(),
        correlationId: options?.correlationId,
        causationId: options?.causationId,
        metadata: options?.metadata,
        aggregateId,
        aggregateType,
        aggregateVersion,
        data,
    };
}
function createIntegrationEvent(type, data, options) {
    return {
        id: createEventId(),
        type,
        version: '1.0',
        source: options?.source || 'madmall-platform',
        timestamp: new Date().toISOString(),
        correlationId: options?.correlationId,
        causationId: options?.causationId,
        metadata: options?.metadata,
        data,
    };
}
// Event envelope utilities
function createEventEnvelope(event, options) {
    return {
        event,
        headers: options?.headers || {},
        messageId: createEventId(),
        timestamp: new Date().toISOString(),
        retryCount: 0,
        maxRetries: options?.maxRetries || 3,
        delayUntil: options?.delayUntil?.toISOString(),
    };
}
// Event validation utilities
function isValidEvent(event) {
    return (event &&
        typeof event.id === 'string' &&
        typeof event.type === 'string' &&
        typeof event.version === 'string' &&
        typeof event.source === 'string' &&
        typeof event.timestamp === 'string');
}
function isDomainEvent(event) {
    return ('aggregateId' in event &&
        'aggregateType' in event &&
        'aggregateVersion' in event &&
        'data' in event);
}
function isIntegrationEvent(event) {
    return 'data' in event && !isDomainEvent(event);
}
// Event filtering utilities
function filterEventsByType(events, eventType) {
    return events.filter((event) => event.type === eventType);
}
function filterEventsByAggregateId(events, aggregateId) {
    return events.filter(event => event.aggregateId === aggregateId);
}
function filterEventsByTimeRange(events, startTime, endTime) {
    return events.filter(event => {
        const eventTime = new Date(event.timestamp);
        return eventTime >= startTime && eventTime <= endTime;
    });
}
// Event serialization utilities
function serializeEvent(event) {
    return JSON.stringify(event, null, 0);
}
function deserializeEvent(eventJson) {
    const event = JSON.parse(eventJson);
    if (!isValidEvent(event)) {
        throw new Error('Invalid event format');
    }
    return event;
}
// Event stream utilities
function sortEventsByTimestamp(events) {
    return [...events].sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());
}
function groupEventsByAggregateId(events) {
    const grouped = new Map();
    for (const event of events) {
        const existing = grouped.get(event.aggregateId) || [];
        existing.push(event);
        grouped.set(event.aggregateId, existing);
    }
    return grouped;
}
function getLatestEventByAggregateId(events, aggregateId) {
    const aggregateEvents = events
        .filter(event => event.aggregateId === aggregateId)
        .sort((a, b) => b.aggregateVersion - a.aggregateVersion);
    return aggregateEvents[0];
}
// Event metadata utilities
function addEventMetadata(event, metadata) {
    return {
        ...event,
        metadata: {
            ...event.metadata,
            ...metadata,
        },
    };
}
function getEventMetadata(event, key) {
    return event.metadata?.[key];
}
// Event correlation utilities
function correlateEvents(events, correlationId) {
    return events.filter(event => event.correlationId === correlationId);
}
function createEventChain(events) {
    const chain = [];
    const eventMap = new Map();
    // Index events by ID
    for (const event of events) {
        eventMap.set(event.id, event);
    }
    // Find root events (no causation ID)
    const rootEvents = events.filter(event => !event.causationId);
    // Build chains from root events
    for (const rootEvent of rootEvents) {
        buildChainFromEvent(rootEvent, eventMap, chain);
    }
    return chain;
}
function buildChainFromEvent(event, eventMap, chain) {
    chain.push(event);
    // Find events caused by this event
    const causedEvents = Array.from(eventMap.values())
        .filter(e => e.causationId === event.id);
    for (const causedEvent of causedEvents) {
        buildChainFromEvent(causedEvent, eventMap, chain);
    }
}
//# sourceMappingURL=data:application/json;base64,