"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageAssetRepository = void 0;
const base_dao_1 = require("@madmall/infrastructure/dao/base-dao");
const validation_1 = require("@madmall/shared-types/database/validation");
const base_entity_1 = require("@madmall/shared-types/database/base-entity");
class ImageAssetRepository extends base_dao_1.BaseDynamoDAO {
    constructor(dynamoService) {
        super(dynamoService, 'IMAGE');
    }
    validateEntitySpecific(entity) {
        return validation_1.DataValidator.validateImageAsset(entity);
    }
    async createFromUrl(params) {
        const now = new Date().toISOString();
        const item = {
            ...base_entity_1.KeyPatterns.IMAGE_METADATA(params.imageId),
            GSI1PK: base_entity_1.KeyPatterns.IMAGES_BY_CATEGORY(params.category).GSI1PK,
            GSI1SK: `CREATED#${now}`,
            GSI3PK: base_entity_1.KeyPatterns.IMAGE_STATUS('pending_review').GSI3PK,
            GSI3SK: `UPDATED#${now}`,
            entityType: 'IMAGE',
            version: 1,
            createdAt: now,
            updatedAt: now,
            imageId: params.imageId,
            url: params.url,
            thumbnailUrl: params.thumbnailUrl,
            altText: params.altText,
            category: params.category,
            tags: params.tags || [],
            source: params.source,
            sourceInfo: params.sourceInfo,
            status: 'pending_review',
        };
        return this.create(item);
    }
    async markValidated(imageId, scores, status = 'active') {
        const pk = `IMAGE#${imageId}`;
        const sk = 'METADATA';
        return this.update(pk, sk, {
            validation: {
                culturalScore: scores.cultural,
                sensitivityScore: scores.sensitivity,
                inclusivityScore: scores.inclusivity,
                lastValidatedAt: new Date().toISOString(),
                validator: scores.validator,
                issues: scores.issues,
            },
            status,
            GSI3PK: base_entity_1.KeyPatterns.IMAGE_STATUS(status).GSI3PK,
            GSI3SK: `UPDATED#${new Date().toISOString()}`,
        });
    }
    async listPending(limit = 20) {
        const { items } = await this.queryGSI('GSI3', base_entity_1.KeyPatterns.IMAGE_STATUS('pending_review').GSI3PK, undefined, { limit });
        return items;
    }
    async selectByCategory(category, limit = 1) {
        const { items } = await this.queryGSI('GSI1', base_entity_1.KeyPatterns.IMAGES_BY_CATEGORY(category).GSI1PK, undefined, {
            limit,
            scanIndexForward: false,
        });
        return items;
    }
}
exports.ImageAssetRepository = ImageAssetRepository;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtYXNzZXQtcmVwb3NpdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9yZXBvc2l0b3J5L2ltYWdlLWFzc2V0LXJlcG9zaXRvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbUVBQXFFO0FBQ3JFLDBFQUEwRTtBQUMxRSw0RUFBNkY7QUFFN0YsTUFBYSxvQkFBcUIsU0FBUSx3QkFBaUM7SUFDekUsWUFBWSxhQUE4QjtRQUN4QyxLQUFLLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFUyxzQkFBc0IsQ0FBQyxNQUEwQjtRQUN6RCxPQUFPLDBCQUFhLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELEtBQUssQ0FBQyxhQUFhLENBQUMsTUFTbkI7UUFDQyxNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3JDLE1BQU0sSUFBSSxHQUF1QjtZQUMvQixHQUFHLHlCQUFXLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDN0MsTUFBTSxFQUFFLHlCQUFXLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU07WUFDOUQsTUFBTSxFQUFFLFdBQVcsR0FBRyxFQUFFO1lBQ3hCLE1BQU0sRUFBRSx5QkFBVyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQU07WUFDekQsTUFBTSxFQUFFLFdBQVcsR0FBRyxFQUFFO1lBQ3hCLFVBQVUsRUFBRSxPQUFPO1lBQ25CLE9BQU8sRUFBRSxDQUFDO1lBQ1YsU0FBUyxFQUFFLEdBQUc7WUFDZCxTQUFTLEVBQUUsR0FBRztZQUNkLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTztZQUN2QixHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUc7WUFDZixZQUFZLEVBQUUsTUFBTSxDQUFDLFlBQVk7WUFDakMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO1lBQ3ZCLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUTtZQUN6QixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ3ZCLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTTtZQUNyQixVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVU7WUFDN0IsTUFBTSxFQUFFLGdCQUFnQjtTQUN6QixDQUFDO1FBRUYsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQVcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQWUsRUFBRSxNQUVwQyxFQUFFLFNBQTJDLFFBQVE7UUFDcEQsTUFBTSxFQUFFLEdBQUcsU0FBUyxPQUFPLEVBQUUsQ0FBQztRQUM5QixNQUFNLEVBQUUsR0FBRyxVQUFVLENBQUM7UUFDdEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7WUFDekIsVUFBVSxFQUFFO2dCQUNWLGFBQWEsRUFBRSxNQUFNLENBQUMsUUFBUTtnQkFDOUIsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLFdBQVc7Z0JBQ3BDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxXQUFXO2dCQUNwQyxlQUFlLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7Z0JBQ3pDLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUztnQkFDM0IsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNO2FBQ3RCO1lBQ0QsTUFBTTtZQUNOLE1BQU0sRUFBRSx5QkFBVyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNO1lBQy9DLE1BQU0sRUFBRSxXQUFXLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUU7U0FDdkMsQ0FBQyxDQUFDO0lBQ1osQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxHQUFHLEVBQUU7UUFDMUIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUseUJBQVcsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN2SCxPQUFPLEtBQTZCLENBQUM7SUFDdkMsQ0FBQztJQUVELEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFnQixFQUFFLEtBQUssR0FBRyxDQUFDO1FBQ2hELE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLHlCQUFXLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRTtZQUN4RyxLQUFLO1lBQ0wsZ0JBQWdCLEVBQUUsS0FBSztTQUN4QixDQUFDLENBQUM7UUFDSCxPQUFPLEtBQTZCLENBQUM7SUFDdkMsQ0FBQztDQUNGO0FBNUVELG9EQTRFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtb0RCU2VydmljZSB9IGZyb20gJ0BtYWRtYWxsL2luZnJhc3RydWN0dXJlJztcbmltcG9ydCB7IEJhc2VEeW5hbW9EQU8gfSBmcm9tICdAbWFkbWFsbC9pbmZyYXN0cnVjdHVyZS9kYW8vYmFzZS1kYW8nO1xuaW1wb3J0IHsgRGF0YVZhbGlkYXRvciB9IGZyb20gJ0BtYWRtYWxsL3NoYXJlZC10eXBlcy9kYXRhYmFzZS92YWxpZGF0aW9uJztcbmltcG9ydCB7IER5bmFtb0RCSW1hZ2VBc3NldCwgS2V5UGF0dGVybnMgfSBmcm9tICdAbWFkbWFsbC9zaGFyZWQtdHlwZXMvZGF0YWJhc2UvYmFzZS1lbnRpdHknO1xuXG5leHBvcnQgY2xhc3MgSW1hZ2VBc3NldFJlcG9zaXRvcnkgZXh0ZW5kcyBCYXNlRHluYW1vREFPPER5bmFtb0RCSW1hZ2VBc3NldD4ge1xuICBjb25zdHJ1Y3RvcihkeW5hbW9TZXJ2aWNlOiBEeW5hbW9EQlNlcnZpY2UpIHtcbiAgICBzdXBlcihkeW5hbW9TZXJ2aWNlLCAnSU1BR0UnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB2YWxpZGF0ZUVudGl0eVNwZWNpZmljKGVudGl0eTogRHluYW1vREJJbWFnZUFzc2V0KSB7XG4gICAgcmV0dXJuIERhdGFWYWxpZGF0b3IudmFsaWRhdGVJbWFnZUFzc2V0KGVudGl0eSk7XG4gIH1cblxuICBhc3luYyBjcmVhdGVGcm9tVXJsKHBhcmFtczoge1xuICAgIGltYWdlSWQ6IHN0cmluZztcbiAgICB1cmw6IHN0cmluZztcbiAgICB0aHVtYm5haWxVcmw/OiBzdHJpbmc7XG4gICAgYWx0VGV4dDogc3RyaW5nO1xuICAgIGNhdGVnb3J5OiBzdHJpbmc7XG4gICAgdGFncz86IHN0cmluZ1tdO1xuICAgIHNvdXJjZTogRHluYW1vREJJbWFnZUFzc2V0Wydzb3VyY2UnXTtcbiAgICBzb3VyY2VJbmZvPzogRHluYW1vREJJbWFnZUFzc2V0Wydzb3VyY2VJbmZvJ107XG4gIH0pOiBQcm9taXNlPER5bmFtb0RCSW1hZ2VBc3NldD4ge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICBjb25zdCBpdGVtOiBEeW5hbW9EQkltYWdlQXNzZXQgPSB7XG4gICAgICAuLi5LZXlQYXR0ZXJucy5JTUFHRV9NRVRBREFUQShwYXJhbXMuaW1hZ2VJZCksXG4gICAgICBHU0kxUEs6IEtleVBhdHRlcm5zLklNQUdFU19CWV9DQVRFR09SWShwYXJhbXMuY2F0ZWdvcnkpLkdTSTFQSyxcbiAgICAgIEdTSTFTSzogYENSRUFURUQjJHtub3d9YCxcbiAgICAgIEdTSTNQSzogS2V5UGF0dGVybnMuSU1BR0VfU1RBVFVTKCdwZW5kaW5nX3JldmlldycpLkdTSTNQSyxcbiAgICAgIEdTSTNTSzogYFVQREFURUQjJHtub3d9YCxcbiAgICAgIGVudGl0eVR5cGU6ICdJTUFHRScsXG4gICAgICB2ZXJzaW9uOiAxLFxuICAgICAgY3JlYXRlZEF0OiBub3csXG4gICAgICB1cGRhdGVkQXQ6IG5vdyxcbiAgICAgIGltYWdlSWQ6IHBhcmFtcy5pbWFnZUlkLFxuICAgICAgdXJsOiBwYXJhbXMudXJsLFxuICAgICAgdGh1bWJuYWlsVXJsOiBwYXJhbXMudGh1bWJuYWlsVXJsLFxuICAgICAgYWx0VGV4dDogcGFyYW1zLmFsdFRleHQsXG4gICAgICBjYXRlZ29yeTogcGFyYW1zLmNhdGVnb3J5LFxuICAgICAgdGFnczogcGFyYW1zLnRhZ3MgfHwgW10sXG4gICAgICBzb3VyY2U6IHBhcmFtcy5zb3VyY2UsXG4gICAgICBzb3VyY2VJbmZvOiBwYXJhbXMuc291cmNlSW5mbyxcbiAgICAgIHN0YXR1czogJ3BlbmRpbmdfcmV2aWV3JyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlKGl0ZW0gYXMgYW55KTtcbiAgfVxuXG4gIGFzeW5jIG1hcmtWYWxpZGF0ZWQoaW1hZ2VJZDogc3RyaW5nLCBzY29yZXM6IHtcbiAgICBjdWx0dXJhbDogbnVtYmVyOyBzZW5zaXRpdml0eTogbnVtYmVyOyBpbmNsdXNpdml0eTogbnVtYmVyOyBpc3N1ZXM/OiBzdHJpbmdbXTsgdmFsaWRhdG9yPzogc3RyaW5nO1xuICB9LCBzdGF0dXM6ICdhY3RpdmUnIHwgJ2ZsYWdnZWQnIHwgJ3JlbW92ZWQnID0gJ2FjdGl2ZScpOiBQcm9taXNlPER5bmFtb0RCSW1hZ2VBc3NldD4ge1xuICAgIGNvbnN0IHBrID0gYElNQUdFIyR7aW1hZ2VJZH1gO1xuICAgIGNvbnN0IHNrID0gJ01FVEFEQVRBJztcbiAgICByZXR1cm4gdGhpcy51cGRhdGUocGssIHNrLCB7XG4gICAgICB2YWxpZGF0aW9uOiB7XG4gICAgICAgIGN1bHR1cmFsU2NvcmU6IHNjb3Jlcy5jdWx0dXJhbCxcbiAgICAgICAgc2Vuc2l0aXZpdHlTY29yZTogc2NvcmVzLnNlbnNpdGl2aXR5LFxuICAgICAgICBpbmNsdXNpdml0eVNjb3JlOiBzY29yZXMuaW5jbHVzaXZpdHksXG4gICAgICAgIGxhc3RWYWxpZGF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgICB2YWxpZGF0b3I6IHNjb3Jlcy52YWxpZGF0b3IsXG4gICAgICAgIGlzc3Vlczogc2NvcmVzLmlzc3VlcyxcbiAgICAgIH0sXG4gICAgICBzdGF0dXMsXG4gICAgICBHU0kzUEs6IEtleVBhdHRlcm5zLklNQUdFX1NUQVRVUyhzdGF0dXMpLkdTSTNQSyxcbiAgICAgIEdTSTNTSzogYFVQREFURUQjJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9YCxcbiAgICB9IGFzIGFueSk7XG4gIH1cblxuICBhc3luYyBsaXN0UGVuZGluZyhsaW1pdCA9IDIwKSB7XG4gICAgY29uc3QgeyBpdGVtcyB9ID0gYXdhaXQgdGhpcy5xdWVyeUdTSSgnR1NJMycsIEtleVBhdHRlcm5zLklNQUdFX1NUQVRVUygncGVuZGluZ19yZXZpZXcnKS5HU0kzUEssIHVuZGVmaW5lZCwgeyBsaW1pdCB9KTtcbiAgICByZXR1cm4gaXRlbXMgYXMgRHluYW1vREJJbWFnZUFzc2V0W107XG4gIH1cblxuICBhc3luYyBzZWxlY3RCeUNhdGVnb3J5KGNhdGVnb3J5OiBzdHJpbmcsIGxpbWl0ID0gMSkge1xuICAgIGNvbnN0IHsgaXRlbXMgfSA9IGF3YWl0IHRoaXMucXVlcnlHU0koJ0dTSTEnLCBLZXlQYXR0ZXJucy5JTUFHRVNfQllfQ0FURUdPUlkoY2F0ZWdvcnkpLkdTSTFQSywgdW5kZWZpbmVkLCB7XG4gICAgICBsaW1pdCxcbiAgICAgIHNjYW5JbmRleEZvcndhcmQ6IGZhbHNlLFxuICAgIH0pO1xuICAgIHJldHVybiBpdGVtcyBhcyBEeW5hbW9EQkltYWdlQXNzZXRbXTtcbiAgfVxufVxuXG4iXX0=