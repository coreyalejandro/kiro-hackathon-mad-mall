"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageAssetRepository = void 0;
const base_dao_1 = require("@madmall/infrastructure/dao/base-dao");
const validation_1 = require("@madmall/shared-types/database/validation");
const base_entity_1 = require("@madmall/shared-types/database/base-entity");
class ImageAssetRepository extends base_dao_1.BaseDynamoDAO {
    constructor(dynamoService) {
        super(dynamoService, 'IMAGE');
    }
    validateEntitySpecific(entity) {
        return validation_1.DataValidator.validateImageAsset(entity);
    }
    async createFromUrl(params) {
        const now = new Date().toISOString();
        const item = {
            ...base_entity_1.KeyPatterns.IMAGE_METADATA(params.imageId),
            GSI1PK: base_entity_1.KeyPatterns.IMAGES_BY_CATEGORY(params.category).GSI1PK,
            GSI1SK: `CREATED#${now}`,
            GSI3PK: base_entity_1.KeyPatterns.IMAGE_STATUS('pending_review').GSI3PK,
            GSI3SK: `UPDATED#${now}`,
            entityType: 'IMAGE',
            version: 1,
            createdAt: now,
            updatedAt: now,
            imageId: params.imageId,
            url: params.url,
            thumbnailUrl: params.thumbnailUrl,
            altText: params.altText,
            category: params.category,
            tags: params.tags || [],
            source: params.source,
            sourceInfo: params.sourceInfo,
            status: 'pending_review',
        };
        return this.create(item);
    }
    async markValidated(imageId, scores, status = 'active') {
        const pk = `IMAGE#${imageId}`;
        const sk = 'METADATA';
        return this.update(pk, sk, {
            validation: {
                culturalScore: scores.cultural,
                sensitivityScore: scores.sensitivity,
                inclusivityScore: scores.inclusivity,
                lastValidatedAt: new Date().toISOString(),
                validator: scores.validator,
                issues: scores.issues,
            },
            status,
            GSI3PK: base_entity_1.KeyPatterns.IMAGE_STATUS(status).GSI3PK,
            GSI3SK: `UPDATED#${new Date().toISOString()}`,
        });
    }
    async listPending(limit = 20) {
        const { items } = await this.queryGSI('GSI3', base_entity_1.KeyPatterns.IMAGE_STATUS('pending_review').GSI3PK, undefined, { limit });
        return items;
    }
    async listFlagged(limit = 20) {
        const { items } = await this.queryGSI('GSI3', base_entity_1.KeyPatterns.IMAGE_STATUS('flagged').GSI3PK, undefined, { limit });
        return items;
    }
    async selectByCategory(category, limit = 1) {
        const { items } = await this.queryGSI('GSI1', base_entity_1.KeyPatterns.IMAGES_BY_CATEGORY(category).GSI1PK, undefined, {
            limit,
            scanIndexForward: false,
        });
        return items;
    }
}
exports.ImageAssetRepository = ImageAssetRepository;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtYXNzZXQtcmVwb3NpdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9yZXBvc2l0b3J5L2ltYWdlLWFzc2V0LXJlcG9zaXRvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsbUVBQXFFO0FBQ3JFLDBFQUEwRTtBQUMxRSw0RUFBNkY7QUFFN0YsTUFBYSxvQkFBcUIsU0FBUSx3QkFBaUM7SUFDekUsWUFBWSxhQUE4QjtRQUN4QyxLQUFLLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFUyxzQkFBc0IsQ0FBQyxNQUEwQjtRQUN6RCxPQUFPLDBCQUFhLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELEtBQUssQ0FBQyxhQUFhLENBQUMsTUFTbkI7UUFDQyxNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3JDLE1BQU0sSUFBSSxHQUF1QjtZQUMvQixHQUFHLHlCQUFXLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDN0MsTUFBTSxFQUFFLHlCQUFXLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU07WUFDOUQsTUFBTSxFQUFFLFdBQVcsR0FBRyxFQUFFO1lBQ3hCLE1BQU0sRUFBRSx5QkFBVyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLE1BQU07WUFDekQsTUFBTSxFQUFFLFdBQVcsR0FBRyxFQUFFO1lBQ3hCLFVBQVUsRUFBRSxPQUFPO1lBQ25CLE9BQU8sRUFBRSxDQUFDO1lBQ1YsU0FBUyxFQUFFLEdBQUc7WUFDZCxTQUFTLEVBQUUsR0FBRztZQUNkLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTztZQUN2QixHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUc7WUFDZixZQUFZLEVBQUUsTUFBTSxDQUFDLFlBQVk7WUFDakMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxPQUFPO1lBQ3ZCLFFBQVEsRUFBRSxNQUFNLENBQUMsUUFBUTtZQUN6QixJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksSUFBSSxFQUFFO1lBQ3ZCLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTTtZQUNyQixVQUFVLEVBQUUsTUFBTSxDQUFDLFVBQVU7WUFDN0IsTUFBTSxFQUFFLGdCQUFnQjtTQUN6QixDQUFDO1FBRUYsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQVcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQWUsRUFBRSxNQUVwQyxFQUFFLFNBQTJDLFFBQVE7UUFDcEQsTUFBTSxFQUFFLEdBQUcsU0FBUyxPQUFPLEVBQUUsQ0FBQztRQUM5QixNQUFNLEVBQUUsR0FBRyxVQUFVLENBQUM7UUFDdEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7WUFDekIsVUFBVSxFQUFFO2dCQUNWLGFBQWEsRUFBRSxNQUFNLENBQUMsUUFBUTtnQkFDOUIsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLFdBQVc7Z0JBQ3BDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyxXQUFXO2dCQUNwQyxlQUFlLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUU7Z0JBQ3pDLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUztnQkFDM0IsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNO2FBQ3RCO1lBQ0QsTUFBTTtZQUNOLE1BQU0sRUFBRSx5QkFBVyxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNO1lBQy9DLE1BQU0sRUFBRSxXQUFXLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLEVBQUU7U0FDdkMsQ0FBQyxDQUFDO0lBQ1osQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxHQUFHLEVBQUU7UUFDMUIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUseUJBQVcsQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUN2SCxPQUFPLEtBQTZCLENBQUM7SUFDdkMsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBSyxHQUFHLEVBQUU7UUFDMUIsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUseUJBQVcsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDaEgsT0FBTyxLQUE2QixDQUFDO0lBQ3ZDLENBQUM7SUFFRCxLQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBZ0IsRUFBRSxLQUFLLEdBQUcsQ0FBQztRQUNoRCxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSx5QkFBVyxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxTQUFTLEVBQUU7WUFDeEcsS0FBSztZQUNMLGdCQUFnQixFQUFFLEtBQUs7U0FDeEIsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxLQUE2QixDQUFDO0lBQ3ZDLENBQUM7Q0FDRjtBQWpGRCxvREFpRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQlNlcnZpY2UgfSBmcm9tICdAbWFkbWFsbC9pbmZyYXN0cnVjdHVyZSc7XG5pbXBvcnQgeyBCYXNlRHluYW1vREFPIH0gZnJvbSAnQG1hZG1hbGwvaW5mcmFzdHJ1Y3R1cmUvZGFvL2Jhc2UtZGFvJztcbmltcG9ydCB7IERhdGFWYWxpZGF0b3IgfSBmcm9tICdAbWFkbWFsbC9zaGFyZWQtdHlwZXMvZGF0YWJhc2UvdmFsaWRhdGlvbic7XG5pbXBvcnQgeyBEeW5hbW9EQkltYWdlQXNzZXQsIEtleVBhdHRlcm5zIH0gZnJvbSAnQG1hZG1hbGwvc2hhcmVkLXR5cGVzL2RhdGFiYXNlL2Jhc2UtZW50aXR5JztcblxuZXhwb3J0IGNsYXNzIEltYWdlQXNzZXRSZXBvc2l0b3J5IGV4dGVuZHMgQmFzZUR5bmFtb0RBTzxEeW5hbW9EQkltYWdlQXNzZXQ+IHtcbiAgY29uc3RydWN0b3IoZHluYW1vU2VydmljZTogRHluYW1vREJTZXJ2aWNlKSB7XG4gICAgc3VwZXIoZHluYW1vU2VydmljZSwgJ0lNQUdFJyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdmFsaWRhdGVFbnRpdHlTcGVjaWZpYyhlbnRpdHk6IER5bmFtb0RCSW1hZ2VBc3NldCkge1xuICAgIHJldHVybiBEYXRhVmFsaWRhdG9yLnZhbGlkYXRlSW1hZ2VBc3NldChlbnRpdHkpO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlRnJvbVVybChwYXJhbXM6IHtcbiAgICBpbWFnZUlkOiBzdHJpbmc7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgdGh1bWJuYWlsVXJsPzogc3RyaW5nO1xuICAgIGFsdFRleHQ6IHN0cmluZztcbiAgICBjYXRlZ29yeTogc3RyaW5nO1xuICAgIHRhZ3M/OiBzdHJpbmdbXTtcbiAgICBzb3VyY2U6IER5bmFtb0RCSW1hZ2VBc3NldFsnc291cmNlJ107XG4gICAgc291cmNlSW5mbz86IER5bmFtb0RCSW1hZ2VBc3NldFsnc291cmNlSW5mbyddO1xuICB9KTogUHJvbWlzZTxEeW5hbW9EQkltYWdlQXNzZXQ+IHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgY29uc3QgaXRlbTogRHluYW1vREJJbWFnZUFzc2V0ID0ge1xuICAgICAgLi4uS2V5UGF0dGVybnMuSU1BR0VfTUVUQURBVEEocGFyYW1zLmltYWdlSWQpLFxuICAgICAgR1NJMVBLOiBLZXlQYXR0ZXJucy5JTUFHRVNfQllfQ0FURUdPUlkocGFyYW1zLmNhdGVnb3J5KS5HU0kxUEssXG4gICAgICBHU0kxU0s6IGBDUkVBVEVEIyR7bm93fWAsXG4gICAgICBHU0kzUEs6IEtleVBhdHRlcm5zLklNQUdFX1NUQVRVUygncGVuZGluZ19yZXZpZXcnKS5HU0kzUEssXG4gICAgICBHU0kzU0s6IGBVUERBVEVEIyR7bm93fWAsXG4gICAgICBlbnRpdHlUeXBlOiAnSU1BR0UnLFxuICAgICAgdmVyc2lvbjogMSxcbiAgICAgIGNyZWF0ZWRBdDogbm93LFxuICAgICAgdXBkYXRlZEF0OiBub3csXG4gICAgICBpbWFnZUlkOiBwYXJhbXMuaW1hZ2VJZCxcbiAgICAgIHVybDogcGFyYW1zLnVybCxcbiAgICAgIHRodW1ibmFpbFVybDogcGFyYW1zLnRodW1ibmFpbFVybCxcbiAgICAgIGFsdFRleHQ6IHBhcmFtcy5hbHRUZXh0LFxuICAgICAgY2F0ZWdvcnk6IHBhcmFtcy5jYXRlZ29yeSxcbiAgICAgIHRhZ3M6IHBhcmFtcy50YWdzIHx8IFtdLFxuICAgICAgc291cmNlOiBwYXJhbXMuc291cmNlLFxuICAgICAgc291cmNlSW5mbzogcGFyYW1zLnNvdXJjZUluZm8sXG4gICAgICBzdGF0dXM6ICdwZW5kaW5nX3JldmlldycsXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLmNyZWF0ZShpdGVtIGFzIGFueSk7XG4gIH1cblxuICBhc3luYyBtYXJrVmFsaWRhdGVkKGltYWdlSWQ6IHN0cmluZywgc2NvcmVzOiB7XG4gICAgY3VsdHVyYWw6IG51bWJlcjsgc2Vuc2l0aXZpdHk6IG51bWJlcjsgaW5jbHVzaXZpdHk6IG51bWJlcjsgaXNzdWVzPzogc3RyaW5nW107IHZhbGlkYXRvcj86IHN0cmluZztcbiAgfSwgc3RhdHVzOiAnYWN0aXZlJyB8ICdmbGFnZ2VkJyB8ICdyZW1vdmVkJyA9ICdhY3RpdmUnKTogUHJvbWlzZTxEeW5hbW9EQkltYWdlQXNzZXQ+IHtcbiAgICBjb25zdCBwayA9IGBJTUFHRSMke2ltYWdlSWR9YDtcbiAgICBjb25zdCBzayA9ICdNRVRBREFUQSc7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlKHBrLCBzaywge1xuICAgICAgdmFsaWRhdGlvbjoge1xuICAgICAgICBjdWx0dXJhbFNjb3JlOiBzY29yZXMuY3VsdHVyYWwsXG4gICAgICAgIHNlbnNpdGl2aXR5U2NvcmU6IHNjb3Jlcy5zZW5zaXRpdml0eSxcbiAgICAgICAgaW5jbHVzaXZpdHlTY29yZTogc2NvcmVzLmluY2x1c2l2aXR5LFxuICAgICAgICBsYXN0VmFsaWRhdGVkQXQ6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgdmFsaWRhdG9yOiBzY29yZXMudmFsaWRhdG9yLFxuICAgICAgICBpc3N1ZXM6IHNjb3Jlcy5pc3N1ZXMsXG4gICAgICB9LFxuICAgICAgc3RhdHVzLFxuICAgICAgR1NJM1BLOiBLZXlQYXR0ZXJucy5JTUFHRV9TVEFUVVMoc3RhdHVzKS5HU0kzUEssXG4gICAgICBHU0kzU0s6IGBVUERBVEVEIyR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfWAsXG4gICAgfSBhcyBhbnkpO1xuICB9XG5cbiAgYXN5bmMgbGlzdFBlbmRpbmcobGltaXQgPSAyMCkge1xuICAgIGNvbnN0IHsgaXRlbXMgfSA9IGF3YWl0IHRoaXMucXVlcnlHU0koJ0dTSTMnLCBLZXlQYXR0ZXJucy5JTUFHRV9TVEFUVVMoJ3BlbmRpbmdfcmV2aWV3JykuR1NJM1BLLCB1bmRlZmluZWQsIHsgbGltaXQgfSk7XG4gICAgcmV0dXJuIGl0ZW1zIGFzIER5bmFtb0RCSW1hZ2VBc3NldFtdO1xuICB9XG5cbiAgYXN5bmMgbGlzdEZsYWdnZWQobGltaXQgPSAyMCkge1xuICAgIGNvbnN0IHsgaXRlbXMgfSA9IGF3YWl0IHRoaXMucXVlcnlHU0koJ0dTSTMnLCBLZXlQYXR0ZXJucy5JTUFHRV9TVEFUVVMoJ2ZsYWdnZWQnKS5HU0kzUEssIHVuZGVmaW5lZCwgeyBsaW1pdCB9KTtcbiAgICByZXR1cm4gaXRlbXMgYXMgRHluYW1vREJJbWFnZUFzc2V0W107XG4gIH1cblxuICBhc3luYyBzZWxlY3RCeUNhdGVnb3J5KGNhdGVnb3J5OiBzdHJpbmcsIGxpbWl0ID0gMSkge1xuICAgIGNvbnN0IHsgaXRlbXMgfSA9IGF3YWl0IHRoaXMucXVlcnlHU0koJ0dTSTEnLCBLZXlQYXR0ZXJucy5JTUFHRVNfQllfQ0FURUdPUlkoY2F0ZWdvcnkpLkdTSTFQSywgdW5kZWZpbmVkLCB7XG4gICAgICBsaW1pdCxcbiAgICAgIHNjYW5JbmRleEZvcndhcmQ6IGZhbHNlLFxuICAgIH0pO1xuICAgIHJldHVybiBpdGVtcyBhcyBEeW5hbW9EQkltYWdlQXNzZXRbXTtcbiAgfVxufVxuXG4iXX0=