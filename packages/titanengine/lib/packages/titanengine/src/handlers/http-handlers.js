"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postImportPexels = postImportPexels;
exports.postImportUnsplash = postImportUnsplash;
exports.getPending = getPending;
exports.getFlagged = getFlagged;
exports.postValidate = postValidate;
exports.getSelect = getSelect;
const titanengine_1 = require("../service/titanengine");
const engine = titanengine_1.TitanEngine.createDefault();
async function postImportPexels(body) {
    return engine.importFromPexels(body);
}
async function postImportUnsplash(body) {
    return engine.importFromUnsplash(body);
}
async function getPending() {
    return engine.listPending();
}
async function getFlagged() {
    return engine.listFlagged();
}
async function postValidate(body) {
    const pending = await engine.listPending(100);
    const found = pending.find(p => p.imageId === body.imageId);
    if (!found)
        return { error: 'not_found' };
    const scores = await engine.validateImageContent({ url: found.url, altText: found.altText, category: found.category });
    const status = scores.cultural > 0.6 && scores.sensitivity > 0.6 && scores.inclusivity > 0.6 ? 'active' : 'flagged';
    const updated = await engine.images.markValidated(found.imageId, scores, status);
    return updated;
}
async function getSelect(query) {
    const results = await engine.selectByContext(query.context, 1);
    return results[0] || null;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1oYW5kbGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9oYW5kbGVycy9odHRwLWhhbmRsZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBSUEsNENBRUM7QUFFRCxnREFFQztBQUVELGdDQUVDO0FBRUQsZ0NBRUM7QUFFRCxvQ0FTQztBQUVELDhCQUdDO0FBbENELHdEQUFxRDtBQUVyRCxNQUFNLE1BQU0sR0FBRyx5QkFBVyxDQUFDLGFBQWEsRUFBRSxDQUFDO0FBRXBDLEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxJQUF5RDtJQUM5RixPQUFPLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRU0sS0FBSyxVQUFVLGtCQUFrQixDQUFDLElBQXlEO0lBQ2hHLE9BQU8sTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pDLENBQUM7QUFFTSxLQUFLLFVBQVUsVUFBVTtJQUM5QixPQUFPLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUM5QixDQUFDO0FBRU0sS0FBSyxVQUFVLFVBQVU7SUFDOUIsT0FBTyxNQUFNLENBQUMsV0FBVyxFQUFFLENBQUM7QUFDOUIsQ0FBQztBQUVNLEtBQUssVUFBVSxZQUFZLENBQUMsSUFBeUI7SUFDMUQsTUFBTSxPQUFPLEdBQUcsTUFBTSxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1RCxJQUFJLENBQUMsS0FBSztRQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUM7SUFFMUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsb0JBQW9CLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDdkgsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLFFBQVEsR0FBRyxHQUFHLElBQUksTUFBTSxDQUFDLFdBQVcsR0FBRyxHQUFHLElBQUksTUFBTSxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ3BILE1BQU0sT0FBTyxHQUFHLE1BQU8sTUFBYyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDakcsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVNLEtBQUssVUFBVSxTQUFTLENBQUMsS0FBMEI7SUFDeEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxNQUFNLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0QsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDO0FBQzVCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaXRhbkVuZ2luZSB9IGZyb20gJy4uL3NlcnZpY2UvdGl0YW5lbmdpbmUnO1xuXG5jb25zdCBlbmdpbmUgPSBUaXRhbkVuZ2luZS5jcmVhdGVEZWZhdWx0KCk7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwb3N0SW1wb3J0UGV4ZWxzKGJvZHk6IHsgcXVlcnk6IHN0cmluZzsgY2F0ZWdvcnk6IHN0cmluZzsgY291bnQ/OiBudW1iZXIgfSkge1xuICByZXR1cm4gZW5naW5lLmltcG9ydEZyb21QZXhlbHMoYm9keSk7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwb3N0SW1wb3J0VW5zcGxhc2goYm9keTogeyBxdWVyeTogc3RyaW5nOyBjYXRlZ29yeTogc3RyaW5nOyBjb3VudD86IG51bWJlciB9KSB7XG4gIHJldHVybiBlbmdpbmUuaW1wb3J0RnJvbVVuc3BsYXNoKGJvZHkpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0UGVuZGluZygpIHtcbiAgcmV0dXJuIGVuZ2luZS5saXN0UGVuZGluZygpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RmxhZ2dlZCgpIHtcbiAgcmV0dXJuIGVuZ2luZS5saXN0RmxhZ2dlZCgpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcG9zdFZhbGlkYXRlKGJvZHk6IHsgaW1hZ2VJZDogc3RyaW5nIH0pIHtcbiAgY29uc3QgcGVuZGluZyA9IGF3YWl0IGVuZ2luZS5saXN0UGVuZGluZygxMDApO1xuICBjb25zdCBmb3VuZCA9IHBlbmRpbmcuZmluZChwID0+IHAuaW1hZ2VJZCA9PT0gYm9keS5pbWFnZUlkKTtcbiAgaWYgKCFmb3VuZCkgcmV0dXJuIHsgZXJyb3I6ICdub3RfZm91bmQnIH07XG5cbiAgY29uc3Qgc2NvcmVzID0gYXdhaXQgZW5naW5lLnZhbGlkYXRlSW1hZ2VDb250ZW50KHsgdXJsOiBmb3VuZC51cmwsIGFsdFRleHQ6IGZvdW5kLmFsdFRleHQsIGNhdGVnb3J5OiBmb3VuZC5jYXRlZ29yeSB9KTtcbiAgY29uc3Qgc3RhdHVzID0gc2NvcmVzLmN1bHR1cmFsID4gMC42ICYmIHNjb3Jlcy5zZW5zaXRpdml0eSA+IDAuNiAmJiBzY29yZXMuaW5jbHVzaXZpdHkgPiAwLjYgPyAnYWN0aXZlJyA6ICdmbGFnZ2VkJztcbiAgY29uc3QgdXBkYXRlZCA9IGF3YWl0IChlbmdpbmUgYXMgYW55KS5pbWFnZXMubWFya1ZhbGlkYXRlZChmb3VuZC5pbWFnZUlkLCBzY29yZXMgYXMgYW55LCBzdGF0dXMpO1xuICByZXR1cm4gdXBkYXRlZDtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFNlbGVjdChxdWVyeTogeyBjb250ZXh0OiBzdHJpbmcgfSkge1xuICBjb25zdCByZXN1bHRzID0gYXdhaXQgZW5naW5lLnNlbGVjdEJ5Q29udGV4dChxdWVyeS5jb250ZXh0LCAxKTtcbiAgcmV0dXJuIHJlc3VsdHNbMF0gfHwgbnVsbDtcbn1cblxuIl19