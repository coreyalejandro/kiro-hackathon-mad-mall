"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const titanengine_1 = require("./titanengine");
const recommendCareMock = jest.fn(async (input) => ({
    userId: input.userId,
    items: [],
    strategy: 'dspy',
    runtimeMs: 42,
    meta: { optimized: true },
}));
jest.mock('./dspy-bridge', () => ({
    DspyBridge: jest.fn().mockImplementation(() => ({
        recommendCare: recommendCareMock,
    })),
}));
describe('TitanEngine.generateCareModel', () => {
    beforeEach(() => {
        process.env.KCACHE_INMEMORY = 'true';
        recommendCareMock.mockClear();
    });
    it('propagates DSPy recommendations and caches results', async () => {
        const engine = titanengine_1.TitanEngine.createDefault();
        const input = {
            userId: 'user1',
            age: 30,
            diagnosisStage: 'stage',
            supportNeeds: [],
            culturalContext: { primaryCulture: 'Test' },
        };
        const first = await engine.generateCareModel(input);
        expect(first.cached).toBe(false);
        expect(first.recommendation.meta.optimized).toBe(true);
        expect(recommendCareMock).toHaveBeenCalledTimes(1);
        const second = await engine.generateCareModel(input);
        expect(second.cached).toBe(true);
        expect(second.recommendation.meta.optimized).toBe(true);
        expect(recommendCareMock).toHaveBeenCalledTimes(1);
    });
});
describe('TitanEngine analytics', () => {
    beforeEach(() => {
        process.env.KCACHE_INMEMORY = 'true';
    });
    it('records and retrieves events', async () => {
        const engine = titanengine_1.TitanEngine.createDefault();
        await engine.recordEvent({ userId: 'u1', eventType: 'page', name: 'test' });
        const events = await engine.getEvents('u1');
        expect(events[0].name).toBe('test');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGl0YW5lbmdpbmUudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9zZXJ2aWNlL3RpdGFuZW5naW5lLnRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQ0FBNEM7QUFHNUMsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFVLEVBQStCLEVBQUUsQ0FBQyxDQUFDO0lBQ3BGLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtJQUNwQixLQUFLLEVBQUUsRUFBRTtJQUNULFFBQVEsRUFBRSxNQUFNO0lBQ2hCLFNBQVMsRUFBRSxFQUFFO0lBQ2IsSUFBSSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRTtDQUMxQixDQUFDLENBQUMsQ0FBQztBQUVKLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDaEMsVUFBVSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQzlDLGFBQWEsRUFBRSxpQkFBaUI7S0FDakMsQ0FBQyxDQUFDO0NBQ0osQ0FBQyxDQUFDLENBQUM7QUFFSixRQUFRLENBQUMsK0JBQStCLEVBQUUsR0FBRyxFQUFFO0lBQzdDLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUM7UUFDckMsaUJBQWlCLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsb0RBQW9ELEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDbEUsTUFBTSxNQUFNLEdBQUcseUJBQVcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUMzQyxNQUFNLEtBQUssR0FBRztZQUNaLE1BQU0sRUFBRSxPQUFPO1lBQ2YsR0FBRyxFQUFFLEVBQUU7WUFDUCxjQUFjLEVBQUUsT0FBTztZQUN2QixZQUFZLEVBQUUsRUFBRTtZQUNoQixlQUFlLEVBQUUsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFO1NBQzVDLENBQUM7UUFFRixNQUFNLEtBQUssR0FBRyxNQUFNLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwRCxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqQyxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRW5ELE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxHQUFHLEVBQUU7SUFDckMsVUFBVSxDQUFDLEdBQUcsRUFBRTtRQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxHQUFHLE1BQU0sQ0FBQztJQUN2QyxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw4QkFBOEIsRUFBRSxLQUFLLElBQUksRUFBRTtRQUM1QyxNQUFNLE1BQU0sR0FBRyx5QkFBVyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzNDLE1BQU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUM1RSxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEMsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRpdGFuRW5naW5lIH0gZnJvbSAnLi90aXRhbmVuZ2luZSc7XG5pbXBvcnQgeyBDYXJlUmVjb21tZW5kYXRpb24gfSBmcm9tICcuL2RzcHktYnJpZGdlJztcblxuY29uc3QgcmVjb21tZW5kQ2FyZU1vY2sgPSBqZXN0LmZuKGFzeW5jIChpbnB1dDogYW55KTogUHJvbWlzZTxDYXJlUmVjb21tZW5kYXRpb24+ID0+ICh7XG4gIHVzZXJJZDogaW5wdXQudXNlcklkLFxuICBpdGVtczogW10sXG4gIHN0cmF0ZWd5OiAnZHNweScsXG4gIHJ1bnRpbWVNczogNDIsXG4gIG1ldGE6IHsgb3B0aW1pemVkOiB0cnVlIH0sXG59KSk7XG5cbmplc3QubW9jaygnLi9kc3B5LWJyaWRnZScsICgpID0+ICh7XG4gIERzcHlCcmlkZ2U6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICByZWNvbW1lbmRDYXJlOiByZWNvbW1lbmRDYXJlTW9jayxcbiAgfSkpLFxufSkpO1xuXG5kZXNjcmliZSgnVGl0YW5FbmdpbmUuZ2VuZXJhdGVDYXJlTW9kZWwnLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52LktDQUNIRV9JTk1FTU9SWSA9ICd0cnVlJztcbiAgICByZWNvbW1lbmRDYXJlTW9jay5tb2NrQ2xlYXIoKTtcbiAgfSk7XG5cbiAgaXQoJ3Byb3BhZ2F0ZXMgRFNQeSByZWNvbW1lbmRhdGlvbnMgYW5kIGNhY2hlcyByZXN1bHRzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGVuZ2luZSA9IFRpdGFuRW5naW5lLmNyZWF0ZURlZmF1bHQoKTtcbiAgICBjb25zdCBpbnB1dCA9IHtcbiAgICAgIHVzZXJJZDogJ3VzZXIxJyxcbiAgICAgIGFnZTogMzAsXG4gICAgICBkaWFnbm9zaXNTdGFnZTogJ3N0YWdlJyxcbiAgICAgIHN1cHBvcnROZWVkczogW10sXG4gICAgICBjdWx0dXJhbENvbnRleHQ6IHsgcHJpbWFyeUN1bHR1cmU6ICdUZXN0JyB9LFxuICAgIH07XG5cbiAgICBjb25zdCBmaXJzdCA9IGF3YWl0IGVuZ2luZS5nZW5lcmF0ZUNhcmVNb2RlbChpbnB1dCk7XG4gICAgZXhwZWN0KGZpcnN0LmNhY2hlZCkudG9CZShmYWxzZSk7XG4gICAgZXhwZWN0KGZpcnN0LnJlY29tbWVuZGF0aW9uLm1ldGEub3B0aW1pemVkKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChyZWNvbW1lbmRDYXJlTW9jaykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuXG4gICAgY29uc3Qgc2Vjb25kID0gYXdhaXQgZW5naW5lLmdlbmVyYXRlQ2FyZU1vZGVsKGlucHV0KTtcbiAgICBleHBlY3Qoc2Vjb25kLmNhY2hlZCkudG9CZSh0cnVlKTtcbiAgICBleHBlY3Qoc2Vjb25kLnJlY29tbWVuZGF0aW9uLm1ldGEub3B0aW1pemVkKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChyZWNvbW1lbmRDYXJlTW9jaykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnVGl0YW5FbmdpbmUgYW5hbHl0aWNzJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5LQ0FDSEVfSU5NRU1PUlkgPSAndHJ1ZSc7XG4gIH0pO1xuXG4gIGl0KCdyZWNvcmRzIGFuZCByZXRyaWV2ZXMgZXZlbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IGVuZ2luZSA9IFRpdGFuRW5naW5lLmNyZWF0ZURlZmF1bHQoKTtcbiAgICBhd2FpdCBlbmdpbmUucmVjb3JkRXZlbnQoeyB1c2VySWQ6ICd1MScsIGV2ZW50VHlwZTogJ3BhZ2UnLCBuYW1lOiAndGVzdCcgfSk7XG4gICAgY29uc3QgZXZlbnRzID0gYXdhaXQgZW5naW5lLmdldEV2ZW50cygndTEnKTtcbiAgICBleHBlY3QoZXZlbnRzWzBdLm5hbWUpLnRvQmUoJ3Rlc3QnKTtcbiAgfSk7XG59KTtcbiJdfQ==