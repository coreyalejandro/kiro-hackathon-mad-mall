"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DspyBridge = void 0;
const zod_1 = require("zod");
const CareInputSchema = zod_1.z.object({
    userId: zod_1.z.string(),
    age: zod_1.z.number(),
    diagnosisStage: zod_1.z.string(),
    supportNeeds: zod_1.z.array(zod_1.z.string()).default([]),
    culturalContext: zod_1.z.object({
        primaryCulture: zod_1.z.string(),
        secondaryCultures: zod_1.z.array(zod_1.z.string()).default([]),
        region: zod_1.z.string().default('US'),
        language: zod_1.z.string().default('en'),
        religiousConsiderations: zod_1.z.array(zod_1.z.string()).default([]),
        sensitiveTopics: zod_1.z.array(zod_1.z.string()).default([]),
    }),
    history: zod_1.z.array(zod_1.z.any()).default([]),
});
class DspyBridge {
    constructor(baseUrl) {
        const env = globalThis.process?.env || {};
        this.baseUrl = baseUrl || env.DSPY_SERVICE_URL || 'http://localhost:8001';
    }
    async recommendCare(input) {
        const payload = CareInputSchema.parse(input);
        const res = await fetch(`${this.baseUrl}/recommendations/care`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload),
        });
        if (!res.ok) {
            throw new Error(`DSPy service error: ${res.status} ${await res.text()}`);
        }
        return (await res.json());
    }
}
exports.DspyBridge = DspyBridge;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHNweS1icmlkZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvc2VydmljZS9kc3B5LWJyaWRnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2QkFBd0I7QUFFeEIsTUFBTSxlQUFlLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztJQUMvQixNQUFNLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRTtJQUNsQixHQUFHLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRTtJQUNmLGNBQWMsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO0lBQzFCLFlBQVksRUFBRSxPQUFDLENBQUMsS0FBSyxDQUFDLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFDN0MsZUFBZSxFQUFFLE9BQUMsQ0FBQyxNQUFNLENBQUM7UUFDeEIsY0FBYyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7UUFDMUIsaUJBQWlCLEVBQUUsT0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ2xELE1BQU0sRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUNoQyxRQUFRLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7UUFDbEMsdUJBQXVCLEVBQUUsT0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ3hELGVBQWUsRUFBRSxPQUFDLENBQUMsS0FBSyxDQUFDLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7S0FDakQsQ0FBQztJQUNGLE9BQU8sRUFBRSxPQUFDLENBQUMsS0FBSyxDQUFDLE9BQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Q0FDdEMsQ0FBQyxDQUFDO0FBc0JILE1BQWEsVUFBVTtJQUdyQixZQUFZLE9BQWdCO1FBQzFCLE1BQU0sR0FBRyxHQUFJLFVBQWtCLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUM7UUFDbkQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksR0FBRyxDQUFDLGdCQUFnQixJQUFJLHVCQUF1QixDQUFDO0lBQzVFLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFDLEtBQWdCO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsTUFBTSxHQUFHLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyx1QkFBdUIsRUFBRTtZQUM5RCxNQUFNLEVBQUUsTUFBTTtZQUNkLE9BQU8sRUFBRSxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRTtZQUMvQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7U0FDOUIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNaLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLEdBQUcsQ0FBQyxNQUFNLElBQUksTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLENBQUM7UUFDRCxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQXVCLENBQUM7SUFDbEQsQ0FBQztDQUNGO0FBcEJELGdDQW9CQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHogfSBmcm9tICd6b2QnO1xuXG5jb25zdCBDYXJlSW5wdXRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIHVzZXJJZDogei5zdHJpbmcoKSxcbiAgYWdlOiB6Lm51bWJlcigpLFxuICBkaWFnbm9zaXNTdGFnZTogei5zdHJpbmcoKSxcbiAgc3VwcG9ydE5lZWRzOiB6LmFycmF5KHouc3RyaW5nKCkpLmRlZmF1bHQoW10pLFxuICBjdWx0dXJhbENvbnRleHQ6IHoub2JqZWN0KHtcbiAgICBwcmltYXJ5Q3VsdHVyZTogei5zdHJpbmcoKSxcbiAgICBzZWNvbmRhcnlDdWx0dXJlczogei5hcnJheSh6LnN0cmluZygpKS5kZWZhdWx0KFtdKSxcbiAgICByZWdpb246IHouc3RyaW5nKCkuZGVmYXVsdCgnVVMnKSxcbiAgICBsYW5ndWFnZTogei5zdHJpbmcoKS5kZWZhdWx0KCdlbicpLFxuICAgIHJlbGlnaW91c0NvbnNpZGVyYXRpb25zOiB6LmFycmF5KHouc3RyaW5nKCkpLmRlZmF1bHQoW10pLFxuICAgIHNlbnNpdGl2ZVRvcGljczogei5hcnJheSh6LnN0cmluZygpKS5kZWZhdWx0KFtdKSxcbiAgfSksXG4gIGhpc3Rvcnk6IHouYXJyYXkoei5hbnkoKSkuZGVmYXVsdChbXSksXG59KTtcblxuZXhwb3J0IHR5cGUgQ2FyZUlucHV0ID0gei5pbmZlcjx0eXBlb2YgQ2FyZUlucHV0U2NoZW1hPjtcblxuZXhwb3J0IGludGVyZmFjZSBDYXJlSXRlbSB7XG4gIGlkOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIGNhdGVnb3J5OiBzdHJpbmc7XG4gIHRhZ3M6IHN0cmluZ1tdO1xuICB1cmw/OiBzdHJpbmc7XG4gIGNvbmZpZGVuY2U6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYXJlUmVjb21tZW5kYXRpb24ge1xuICB1c2VySWQ6IHN0cmluZztcbiAgaXRlbXM6IENhcmVJdGVtW107XG4gIHN0cmF0ZWd5OiBzdHJpbmc7XG4gIHJ1bnRpbWVNczogbnVtYmVyO1xuICBtZXRhOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbn1cblxuZXhwb3J0IGNsYXNzIERzcHlCcmlkZ2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IGJhc2VVcmw6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihiYXNlVXJsPzogc3RyaW5nKSB7XG4gICAgY29uc3QgZW52ID0gKGdsb2JhbFRoaXMgYXMgYW55KS5wcm9jZXNzPy5lbnYgfHwge307XG4gICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybCB8fCBlbnYuRFNQWV9TRVJWSUNFX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDo4MDAxJztcbiAgfVxuXG4gIGFzeW5jIHJlY29tbWVuZENhcmUoaW5wdXQ6IENhcmVJbnB1dCk6IFByb21pc2U8Q2FyZVJlY29tbWVuZGF0aW9uPiB7XG4gICAgY29uc3QgcGF5bG9hZCA9IENhcmVJbnB1dFNjaGVtYS5wYXJzZShpbnB1dCk7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7dGhpcy5iYXNlVXJsfS9yZWNvbW1lbmRhdGlvbnMvY2FyZWAsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKSxcbiAgICB9KTtcbiAgICBpZiAoIXJlcy5vaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBEU1B5IHNlcnZpY2UgZXJyb3I6ICR7cmVzLnN0YXR1c30gJHthd2FpdCByZXMudGV4dCgpfWApO1xuICAgIH1cbiAgICByZXR1cm4gKGF3YWl0IHJlcy5qc29uKCkpIGFzIENhcmVSZWNvbW1lbmRhdGlvbjtcbiAgfVxufVxuXG4iXX0=