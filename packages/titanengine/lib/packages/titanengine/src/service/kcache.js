"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TitanKCache = void 0;
const redis_1 = require("redis");
class TitanKCache {
    constructor(config) {
        this.stats = { hits: 0, misses: 0, sets: 0, errors: 0 };
        const url = config?.url || globalThis.process?.env?.REDIS_URL || 'redis://localhost:6379';
        this.ttlSeconds = config?.ttlSeconds ?? 300;
        this.namespace = (config?.namespace || 'titan') + ':kcache:';
        this.client = (0, redis_1.createClient)({ url });
        this.client.on('error', () => {
            this.stats.errors += 1;
        });
        this.useMemory = String(globalThis.process?.env?.KCACHE_INMEMORY || '').toLowerCase() === 'true';
        this.memoryStore = new Map();
    }
    async connect() {
        if (this.useMemory)
            return;
        try {
            if (!this.client.isOpen) {
                await this.client.connect();
            }
        }
        catch {
            // Fallback to in-memory
            this.useMemory = true;
        }
    }
    async disconnect() {
        if (this.useMemory)
            return;
        if (this.client.isOpen) {
            await this.client.quit();
        }
    }
    makeKey(keyParts) {
        return this.namespace + keyParts.map((p) => String(p)).join('|');
    }
    async get(keyParts) {
        const key = this.makeKey(keyParts);
        if (this.useMemory) {
            const entry = this.memoryStore.get(key);
            if (!entry || entry.expiresAt < Date.now()) {
                this.memoryStore.delete(key);
                this.stats.misses += 1;
                return null;
            }
            this.stats.hits += 1;
            return entry.value;
        }
        else {
            try {
                const value = await this.client.get(key);
                if (value === null) {
                    this.stats.misses += 1;
                    return null;
                }
                this.stats.hits += 1;
                return JSON.parse(value);
            }
            catch {
                this.stats.errors += 1;
                return null;
            }
        }
    }
    async set(keyParts, value, ttlSeconds) {
        const key = this.makeKey(keyParts);
        if (this.useMemory) {
            const expiresAt = Date.now() + 1000 * (ttlSeconds ?? this.ttlSeconds);
            this.memoryStore.set(key, { value, expiresAt });
            this.stats.sets += 1;
        }
        else {
            try {
                await this.client.set(key, JSON.stringify(value), {
                    EX: ttlSeconds ?? this.ttlSeconds,
                });
                this.stats.sets += 1;
            }
            catch {
                this.stats.errors += 1;
            }
        }
    }
    async withCache(keyParts, producer, ttlSeconds) {
        const cached = await this.get(keyParts);
        if (cached !== null) {
            return { data: cached, cached: true };
        }
        const data = await producer();
        await this.set(keyParts, data, ttlSeconds);
        return { data, cached: false };
    }
    getStats() {
        return { ...this.stats };
    }
}
exports.TitanKCache = TitanKCache;
//# sourceMappingURL=data:application/json;base64,