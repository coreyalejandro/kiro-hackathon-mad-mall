"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnsplashProvider = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
class UnsplashProvider {
    constructor(accessKey) {
        this.accessKey = accessKey || process.env.UNSPLASH_ACCESS_KEY;
    }
    async search(params) {
        if (!this.accessKey) {
            return [];
        }
        const perPage = Math.min(params.count || 10, 30);
        const url = `https://api.unsplash.com/search/photos?query=${encodeURIComponent(params.query)}&per_page=${perPage}&client_id=${this.accessKey}`;
        const res = await (0, cross_fetch_1.default)(url);
        if (!res.ok) {
            return [];
        }
        const json = await res.json();
        const results = Array.isArray(json.results) ? json.results : [];
        return results.map((p) => ({
            url: p.urls?.raw || p.urls?.full || p.links?.html,
            thumbnailUrl: p.urls?.small || p.urls?.thumb,
            altText: p.alt_description || params.query,
            category: params.category,
            source: 'stock',
            sourceInfo: {
                provider: 'Unsplash',
                user: p.user?.username,
                name: p.user?.name,
                id: p.id,
            },
            tags: [params.query, params.category].filter(Boolean),
        }));
    }
}
exports.UnsplashProvider = UnsplashProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5zcGxhc2gtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3Vuc3BsYXNoLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDhEQUFnQztBQWtCaEMsTUFBYSxnQkFBZ0I7SUFHM0IsWUFBWSxTQUFrQjtRQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDO0lBQ2hFLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQTRCO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDcEIsT0FBTyxFQUFFLENBQUM7UUFDWixDQUFDO1FBRUQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqRCxNQUFNLEdBQUcsR0FBRyxnREFBZ0Qsa0JBQWtCLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLE9BQU8sY0FBYyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFL0ksTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFBLHFCQUFLLEVBQUMsR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQztZQUNaLE9BQU8sRUFBRSxDQUFDO1FBQ1osQ0FBQztRQUVELE1BQU0sSUFBSSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzlCLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFaEUsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzlCLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUk7WUFDakQsWUFBWSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSztZQUM1QyxPQUFPLEVBQUUsQ0FBQyxDQUFDLGVBQWUsSUFBSSxNQUFNLENBQUMsS0FBSztZQUMxQyxRQUFRLEVBQUUsTUFBTSxDQUFDLFFBQVE7WUFDekIsTUFBTSxFQUFFLE9BQU87WUFDZixVQUFVLEVBQUU7Z0JBQ1YsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLFFBQVE7Z0JBQ3RCLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUk7Z0JBQ2xCLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRTthQUNUO1lBQ0QsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztTQUN0RCxDQUFDLENBQUMsQ0FBQztJQUNOLENBQUM7Q0FDRjtBQXRDRCw0Q0FzQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZmV0Y2ggZnJvbSAnY3Jvc3MtZmV0Y2gnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFVuc3BsYXNoSW1wb3J0UGFyYW1zIHtcbiAgcXVlcnk6IHN0cmluZztcbiAgY2F0ZWdvcnk6IHN0cmluZztcbiAgY291bnQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1wb3J0ZWRJbWFnZSB7XG4gIHVybDogc3RyaW5nO1xuICBhbHRUZXh0OiBzdHJpbmc7XG4gIGNhdGVnb3J5OiBzdHJpbmc7XG4gIHNvdXJjZTogc3RyaW5nO1xuICBzb3VyY2VJbmZvPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgdGFncz86IHN0cmluZ1tdO1xuICB0aHVtYm5haWxVcmw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBVbnNwbGFzaFByb3ZpZGVyIHtcbiAgcHJpdmF0ZSBhY2Nlc3NLZXk6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihhY2Nlc3NLZXk/OiBzdHJpbmcpIHtcbiAgICB0aGlzLmFjY2Vzc0tleSA9IGFjY2Vzc0tleSB8fCBwcm9jZXNzLmVudi5VTlNQTEFTSF9BQ0NFU1NfS0VZO1xuICB9XG5cbiAgYXN5bmMgc2VhcmNoKHBhcmFtczogVW5zcGxhc2hJbXBvcnRQYXJhbXMpOiBQcm9taXNlPEltcG9ydGVkSW1hZ2VbXT4ge1xuICAgIGlmICghdGhpcy5hY2Nlc3NLZXkpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBwZXJQYWdlID0gTWF0aC5taW4ocGFyYW1zLmNvdW50IHx8IDEwLCAzMCk7XG4gICAgY29uc3QgdXJsID0gYGh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9zZWFyY2gvcGhvdG9zP3F1ZXJ5PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHBhcmFtcy5xdWVyeSl9JnBlcl9wYWdlPSR7cGVyUGFnZX0mY2xpZW50X2lkPSR7dGhpcy5hY2Nlc3NLZXl9YDtcblxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybCk7XG4gICAgaWYgKCFyZXMub2spIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzLmpzb24oKTtcbiAgICBjb25zdCByZXN1bHRzID0gQXJyYXkuaXNBcnJheShqc29uLnJlc3VsdHMpID8ganNvbi5yZXN1bHRzIDogW107XG5cbiAgICByZXR1cm4gcmVzdWx0cy5tYXAoKHA6IGFueSkgPT4gKHtcbiAgICAgIHVybDogcC51cmxzPy5yYXcgfHwgcC51cmxzPy5mdWxsIHx8IHAubGlua3M/Lmh0bWwsXG4gICAgICB0aHVtYm5haWxVcmw6IHAudXJscz8uc21hbGwgfHwgcC51cmxzPy50aHVtYixcbiAgICAgIGFsdFRleHQ6IHAuYWx0X2Rlc2NyaXB0aW9uIHx8IHBhcmFtcy5xdWVyeSxcbiAgICAgIGNhdGVnb3J5OiBwYXJhbXMuY2F0ZWdvcnksXG4gICAgICBzb3VyY2U6ICdzdG9jaycsXG4gICAgICBzb3VyY2VJbmZvOiB7XG4gICAgICAgIHByb3ZpZGVyOiAnVW5zcGxhc2gnLFxuICAgICAgICB1c2VyOiBwLnVzZXI/LnVzZXJuYW1lLFxuICAgICAgICBuYW1lOiBwLnVzZXI/Lm5hbWUsXG4gICAgICAgIGlkOiBwLmlkLFxuICAgICAgfSxcbiAgICAgIHRhZ3M6IFtwYXJhbXMucXVlcnksIHBhcmFtcy5jYXRlZ29yeV0uZmlsdGVyKEJvb2xlYW4pLFxuICAgIH0pKTtcbiAgfVxufVxuXG4iXX0=