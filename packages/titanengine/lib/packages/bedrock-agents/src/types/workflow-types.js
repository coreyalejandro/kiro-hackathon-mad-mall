"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkflowExecutionContextSchema = exports.WorkflowDefinitionSchema = exports.WorkflowStepSchema = void 0;
const zod_1 = require("zod");
// Workflow step definition
exports.WorkflowStepSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    agentId: zod_1.z.string(),
    inputMapping: zod_1.z.record(zod_1.z.string()).optional(),
    outputMapping: zod_1.z.record(zod_1.z.string()).optional(),
    condition: zod_1.z.string().optional(), // JavaScript expression for conditional execution
    retryPolicy: zod_1.z.object({
        maxRetries: zod_1.z.number().default(3),
        backoffMultiplier: zod_1.z.number().default(2),
        initialDelay: zod_1.z.number().default(1000),
    }).optional(),
});
// Workflow definition
exports.WorkflowDefinitionSchema = zod_1.z.object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    description: zod_1.z.string(),
    version: zod_1.z.string(),
    steps: zod_1.z.array(exports.WorkflowStepSchema),
    errorHandling: zod_1.z.object({
        onError: zod_1.z.enum(['stop', 'continue', 'retry', 'fallback']),
        fallbackSteps: zod_1.z.array(zod_1.z.string()).optional(),
        maxExecutionTime: zod_1.z.number().default(300000), // 5 minutes
    }).optional(),
});
// Workflow execution context
exports.WorkflowExecutionContextSchema = zod_1.z.object({
    workflowId: zod_1.z.string(),
    executionId: zod_1.z.string(),
    agentContext: zod_1.z.any(), // AgentContext type
    input: zod_1.z.record(zod_1.z.any()),
    variables: zod_1.z.record(zod_1.z.any()).default({}),
    stepResults: zod_1.z.record(zod_1.z.any()).default({}),
    startTime: zod_1.z.date(),
    currentStep: zod_1.z.string().optional(),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2Zsb3ctdHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9iZWRyb2NrLWFnZW50cy9zcmMvdHlwZXMvd29ya2Zsb3ctdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkJBQXdCO0FBR3hCLDJCQUEyQjtBQUNkLFFBQUEsa0JBQWtCLEdBQUcsT0FBQyxDQUFDLE1BQU0sQ0FBQztJQUN6QyxFQUFFLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRTtJQUNkLElBQUksRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO0lBQ2hCLE9BQU8sRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO0lBQ25CLFlBQVksRUFBRSxPQUFDLENBQUMsTUFBTSxDQUFDLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLFFBQVEsRUFBRTtJQUM3QyxhQUFhLEVBQUUsT0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUU7SUFDOUMsU0FBUyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxrREFBa0Q7SUFDcEYsV0FBVyxFQUFFLE9BQUMsQ0FBQyxNQUFNLENBQUM7UUFDcEIsVUFBVSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ2pDLGlCQUFpQixFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLFlBQVksRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztLQUN2QyxDQUFDLENBQUMsUUFBUSxFQUFFO0NBQ2QsQ0FBQyxDQUFDO0FBSUgsc0JBQXNCO0FBQ1QsUUFBQSx3QkFBd0IsR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQy9DLEVBQUUsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO0lBQ2QsSUFBSSxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7SUFDaEIsV0FBVyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7SUFDdkIsT0FBTyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUU7SUFDbkIsS0FBSyxFQUFFLE9BQUMsQ0FBQyxLQUFLLENBQUMsMEJBQWtCLENBQUM7SUFDbEMsYUFBYSxFQUFFLE9BQUMsQ0FBQyxNQUFNLENBQUM7UUFDdEIsT0FBTyxFQUFFLE9BQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUMxRCxhQUFhLEVBQUUsT0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUU7UUFDN0MsZ0JBQWdCLEVBQUUsT0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxZQUFZO0tBQzNELENBQUMsQ0FBQyxRQUFRLEVBQUU7Q0FDZCxDQUFDLENBQUM7QUFJSCw2QkFBNkI7QUFDaEIsUUFBQSw4QkFBOEIsR0FBRyxPQUFDLENBQUMsTUFBTSxDQUFDO0lBQ3JELFVBQVUsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO0lBQ3RCLFdBQVcsRUFBRSxPQUFDLENBQUMsTUFBTSxFQUFFO0lBQ3ZCLFlBQVksRUFBRSxPQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsb0JBQW9CO0lBQzNDLEtBQUssRUFBRSxPQUFDLENBQUMsTUFBTSxDQUFDLE9BQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN4QixTQUFTLEVBQUUsT0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO0lBQ3hDLFdBQVcsRUFBRSxPQUFDLENBQUMsTUFBTSxDQUFDLE9BQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7SUFDMUMsU0FBUyxFQUFFLE9BQUMsQ0FBQyxJQUFJLEVBQUU7SUFDbkIsV0FBVyxFQUFFLE9BQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUU7Q0FDbkMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgeiB9IGZyb20gJ3pvZCc7XG5pbXBvcnQgeyBBZ2VudENvbnRleHQsIEFnZW50RXhlY3V0aW9uUmVzdWx0IH0gZnJvbSAnLi9hZ2VudC10eXBlcyc7XG5cbi8vIFdvcmtmbG93IHN0ZXAgZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IFdvcmtmbG93U3RlcFNjaGVtYSA9IHoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCksXG4gIG5hbWU6IHouc3RyaW5nKCksXG4gIGFnZW50SWQ6IHouc3RyaW5nKCksXG4gIGlucHV0TWFwcGluZzogei5yZWNvcmQoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgb3V0cHV0TWFwcGluZzogei5yZWNvcmQoei5zdHJpbmcoKSkub3B0aW9uYWwoKSxcbiAgY29uZGl0aW9uOiB6LnN0cmluZygpLm9wdGlvbmFsKCksIC8vIEphdmFTY3JpcHQgZXhwcmVzc2lvbiBmb3IgY29uZGl0aW9uYWwgZXhlY3V0aW9uXG4gIHJldHJ5UG9saWN5OiB6Lm9iamVjdCh7XG4gICAgbWF4UmV0cmllczogei5udW1iZXIoKS5kZWZhdWx0KDMpLFxuICAgIGJhY2tvZmZNdWx0aXBsaWVyOiB6Lm51bWJlcigpLmRlZmF1bHQoMiksXG4gICAgaW5pdGlhbERlbGF5OiB6Lm51bWJlcigpLmRlZmF1bHQoMTAwMCksXG4gIH0pLm9wdGlvbmFsKCksXG59KTtcblxuZXhwb3J0IHR5cGUgV29ya2Zsb3dTdGVwID0gei5pbmZlcjx0eXBlb2YgV29ya2Zsb3dTdGVwU2NoZW1hPjtcblxuLy8gV29ya2Zsb3cgZGVmaW5pdGlvblxuZXhwb3J0IGNvbnN0IFdvcmtmbG93RGVmaW5pdGlvblNjaGVtYSA9IHoub2JqZWN0KHtcbiAgaWQ6IHouc3RyaW5nKCksXG4gIG5hbWU6IHouc3RyaW5nKCksXG4gIGRlc2NyaXB0aW9uOiB6LnN0cmluZygpLFxuICB2ZXJzaW9uOiB6LnN0cmluZygpLFxuICBzdGVwczogei5hcnJheShXb3JrZmxvd1N0ZXBTY2hlbWEpLFxuICBlcnJvckhhbmRsaW5nOiB6Lm9iamVjdCh7XG4gICAgb25FcnJvcjogei5lbnVtKFsnc3RvcCcsICdjb250aW51ZScsICdyZXRyeScsICdmYWxsYmFjayddKSxcbiAgICBmYWxsYmFja1N0ZXBzOiB6LmFycmF5KHouc3RyaW5nKCkpLm9wdGlvbmFsKCksXG4gICAgbWF4RXhlY3V0aW9uVGltZTogei5udW1iZXIoKS5kZWZhdWx0KDMwMDAwMCksIC8vIDUgbWludXRlc1xuICB9KS5vcHRpb25hbCgpLFxufSk7XG5cbmV4cG9ydCB0eXBlIFdvcmtmbG93RGVmaW5pdGlvbiA9IHouaW5mZXI8dHlwZW9mIFdvcmtmbG93RGVmaW5pdGlvblNjaGVtYT47XG5cbi8vIFdvcmtmbG93IGV4ZWN1dGlvbiBjb250ZXh0XG5leHBvcnQgY29uc3QgV29ya2Zsb3dFeGVjdXRpb25Db250ZXh0U2NoZW1hID0gei5vYmplY3Qoe1xuICB3b3JrZmxvd0lkOiB6LnN0cmluZygpLFxuICBleGVjdXRpb25JZDogei5zdHJpbmcoKSxcbiAgYWdlbnRDb250ZXh0OiB6LmFueSgpLCAvLyBBZ2VudENvbnRleHQgdHlwZVxuICBpbnB1dDogei5yZWNvcmQoei5hbnkoKSksXG4gIHZhcmlhYmxlczogei5yZWNvcmQoei5hbnkoKSkuZGVmYXVsdCh7fSksXG4gIHN0ZXBSZXN1bHRzOiB6LnJlY29yZCh6LmFueSgpKS5kZWZhdWx0KHt9KSxcbiAgc3RhcnRUaW1lOiB6LmRhdGUoKSxcbiAgY3VycmVudFN0ZXA6IHouc3RyaW5nKCkub3B0aW9uYWwoKSxcbn0pO1xuXG5leHBvcnQgdHlwZSBXb3JrZmxvd0V4ZWN1dGlvbkNvbnRleHQgPSB6LmluZmVyPHR5cGVvZiBXb3JrZmxvd0V4ZWN1dGlvbkNvbnRleHRTY2hlbWE+ICYge1xuICBhZ2VudENvbnRleHQ6IEFnZW50Q29udGV4dDtcbiAgc3RlcFJlc3VsdHM6IFJlY29yZDxzdHJpbmcsIEFnZW50RXhlY3V0aW9uUmVzdWx0Pjtcbn07XG5cbi8vIFdvcmtmbG93IGV4ZWN1dGlvbiByZXN1bHRcbmV4cG9ydCBpbnRlcmZhY2UgV29ya2Zsb3dFeGVjdXRpb25SZXN1bHQge1xuICB3b3JrZmxvd0lkOiBzdHJpbmc7XG4gIGV4ZWN1dGlvbklkOiBzdHJpbmc7XG4gIHN1Y2Nlc3M6IGJvb2xlYW47XG4gIG91dHB1dDogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgZXJyb3I/OiBzdHJpbmc7XG4gIGV4ZWN1dGlvblRpbWU6IG51bWJlcjtcbiAgc3RlcFJlc3VsdHM6IFJlY29yZDxzdHJpbmcsIEFnZW50RXhlY3V0aW9uUmVzdWx0PjtcbiAgY29tcGxldGVkU3RlcHM6IHN0cmluZ1tdO1xuICBmYWlsZWRTdGVwPzogc3RyaW5nO1xufVxuXG4vLyBXb3JrZmxvdyBvcmNoZXN0cmF0b3IgaW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIFdvcmtmbG93T3JjaGVzdHJhdG9yIHtcbiAgcmVnaXN0ZXJXb3JrZmxvdyhkZWZpbml0aW9uOiBXb3JrZmxvd0RlZmluaXRpb24pOiB2b2lkO1xuICBleGVjdXRlV29ya2Zsb3coXG4gICAgd29ya2Zsb3dJZDogc3RyaW5nLFxuICAgIGlucHV0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgIGNvbnRleHQ6IEFnZW50Q29udGV4dFxuICApOiBQcm9taXNlPFdvcmtmbG93RXhlY3V0aW9uUmVzdWx0PjtcbiAgZ2V0V29ya2Zsb3dTdGF0dXMoZXhlY3V0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8V29ya2Zsb3dFeGVjdXRpb25SZXN1bHQgfCBudWxsPjtcbiAgY2FuY2VsV29ya2Zsb3coZXhlY3V0aW9uSWQ6IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj47XG59Il19