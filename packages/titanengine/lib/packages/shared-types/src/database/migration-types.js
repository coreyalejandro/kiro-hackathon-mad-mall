"use strict";
/**
 * Data Migration Types and Interfaces
 * Types for migrating existing data to DynamoDB single-table design
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MADMallMigrationMappings = void 0;
// Predefined migration mappings for MADMall entities
exports.MADMallMigrationMappings = {
    users: {
        entityType: 'USER',
        sourceTable: 'users',
        keyMapping: {
            pk: (item) => `USER#${item.id}`,
            sk: () => 'PROFILE',
            gsi1pk: (item) => `EMAIL#${item.email}`,
            gsi1sk: (item) => `USER#${item.id}`,
            gsi4pk: (item) => `TENANT#${item.tenantId || 'default'}#USERS`,
            gsi4sk: (item) => `CREATED#${item.createdAt || new Date().toISOString()}`,
        },
        fieldMapping: {
            userId: 'id',
            email: 'email',
            'profile.firstName': 'firstName',
            'profile.lastName': 'lastName',
            'profile.bio': 'bio',
            'profile.culturalBackground': (item) => item.culturalBackground ? JSON.parse(item.culturalBackground) : [],
            'profile.communicationStyle': 'communicationStyle',
            'profile.diagnosisStage': 'diagnosisStage',
            'profile.supportNeeds': (item) => item.supportNeeds ? JSON.parse(item.supportNeeds) : [],
            'profile.joinDate': 'createdAt',
            'profile.lastActive': 'lastActive',
            'preferences.profileVisibility': (item) => item.profileVisibility || 'circles_only',
            'preferences.showRealName': (item) => item.showRealName !== false,
            'preferences.allowDirectMessages': (item) => item.allowDirectMessages !== false,
            'preferences.shareHealthJourney': (item) => item.shareHealthJourney !== false,
            'preferences.emailNotifications': (item) => item.emailNotifications !== false,
            'preferences.pushNotifications': (item) => item.pushNotifications !== false,
            'preferences.weeklyDigest': (item) => item.weeklyDigest !== false,
            'preferences.circleNotifications': (item) => item.circleNotifications !== false,
            'preferences.contentPreferences': (item) => item.contentPreferences ? JSON.parse(item.contentPreferences) : [],
            'preferences.circleInterests': (item) => item.circleInterests ? JSON.parse(item.circleInterests) : [],
            'settings.theme': (item) => item.theme || 'auto',
            'settings.language': (item) => item.language || 'en',
            'settings.timezone': (item) => item.timezone || 'UTC',
            primaryGoals: (item) => item.primaryGoals ? JSON.parse(item.primaryGoals) : [],
            isVerified: (item) => item.isVerified === true,
            isActive: (item) => item.isActive !== false,
            entityType: () => 'USER',
            version: () => 1,
        },
        transformations: [
            {
                field: 'createdAt',
                transform: (value) => value ? new Date(value).toISOString() : new Date().toISOString(),
            },
            {
                field: 'updatedAt',
                transform: (value) => value ? new Date(value).toISOString() : new Date().toISOString(),
            },
        ],
    },
    circles: {
        entityType: 'CIRCLE',
        sourceTable: 'circles',
        keyMapping: {
            pk: (item) => `CIRCLE#${item.id}`,
            sk: () => 'METADATA',
            gsi1pk: (item) => `CIRCLE_TYPE#${item.type}`,
            gsi1sk: (item) => `CREATED#${item.createdAt || new Date().toISOString()}`,
            gsi3pk: (item) => `CIRCLE_STATUS#${item.isActive ? 'ACTIVE' : 'INACTIVE'}`,
            gsi3sk: (item) => `UPDATED#${item.updatedAt || new Date().toISOString()}`,
            gsi4pk: (item) => `TENANT#${item.tenantId || 'default'}#CIRCLES`,
            gsi4sk: (item) => `CREATED#${item.createdAt || new Date().toISOString()}`,
        },
        fieldMapping: {
            circleId: 'id',
            name: 'name',
            description: 'description',
            type: 'type',
            privacyLevel: (item) => item.privacyLevel || 'public',
            'settings.isPrivate': (item) => item.isPrivate === true,
            'settings.requireApproval': (item) => item.requireApproval === true,
            'settings.maxMembers': 'maxMembers',
            'settings.culturalFocus': (item) => item.culturalFocus ? JSON.parse(item.culturalFocus) : [],
            'settings.allowGuestPosts': (item) => item.allowGuestPosts !== false,
            'settings.moderationLevel': (item) => item.moderationLevel || 'moderate',
            'settings.contentGuidelines': 'contentGuidelines',
            moderators: (item) => item.moderators ? JSON.parse(item.moderators) : [],
            tags: (item) => item.tags ? JSON.parse(item.tags) : [],
            coverImage: 'coverImage',
            'stats.memberCount': (item) => item.memberCount || 0,
            'stats.activeMembers': (item) => item.activeMembers || 0,
            'stats.postsThisWeek': (item) => item.postsThisWeek || 0,
            'stats.postsThisMonth': (item) => item.postsThisMonth || 0,
            'stats.engagementRate': (item) => item.engagementRate || 0,
            'stats.averageResponseTime': (item) => item.averageResponseTime || 0,
            createdBy: 'createdBy',
            isActive: (item) => item.isActive !== false,
            status: (item) => item.isActive ? 'ACTIVE' : 'INACTIVE',
            entityType: () => 'CIRCLE',
            version: () => 1,
        },
    },
    stories: {
        entityType: 'STORY',
        sourceTable: 'stories',
        keyMapping: {
            pk: (item) => `STORY#${item.id}`,
            sk: () => 'METADATA',
            gsi1pk: (item) => `AUTHOR#${item.authorId}`,
            gsi1sk: (item) => `CREATED#${item.createdAt || new Date().toISOString()}`,
            gsi2pk: () => 'STORY_FEED',
            gsi2sk: (item) => `CREATED#${item.createdAt || new Date().toISOString()}`,
            gsi3pk: (item) => `STORY_STATUS#${item.status || 'PUBLISHED'}`,
            gsi3sk: (item) => `CREATED#${item.createdAt || new Date().toISOString()}`,
        },
        fieldMapping: {
            storyId: 'id',
            title: 'title',
            content: 'content',
            excerpt: 'excerpt',
            'author.id': 'authorId',
            'author.displayName': 'authorDisplayName',
            'author.avatar': 'authorAvatar',
            'author.isVerified': (item) => item.authorIsVerified === true,
            type: (item) => item.type || 'personal_experience',
            status: (item) => item.status || 'published',
            themes: (item) => item.themes ? JSON.parse(item.themes) : [],
            tags: (item) => item.tags ? JSON.parse(item.tags) : [],
            circleId: 'circleId',
            'engagement.likes': (item) => item.likes || 0,
            'engagement.comments': (item) => item.comments || 0,
            'engagement.shares': (item) => item.shares || 0,
            'engagement.saves': (item) => item.saves || 0,
            'engagement.views': (item) => item.views || 0,
            'engagement.helpfulVotes': (item) => item.helpfulVotes || 0,
            'metadata.readTime': (item) => item.readTime || 5,
            'metadata.wordCount': (item) => item.wordCount || 0,
            'metadata.culturalElements': (item) => item.culturalElements ? JSON.parse(item.culturalElements) : [],
            'metadata.therapeuticValue': (item) => item.therapeuticValue ? JSON.parse(item.therapeuticValue) : [],
            'metadata.triggerWarnings': (item) => item.triggerWarnings ? JSON.parse(item.triggerWarnings) : undefined,
            'metadata.ageAppropriate': (item) => item.ageAppropriate !== false,
            moderationStatus: (item) => item.moderationStatus || 'approved',
            moderationNotes: 'moderationNotes',
            featuredAt: (item) => item.featuredAt ? new Date(item.featuredAt).toISOString() : undefined,
            publishedAt: (item) => item.publishedAt ? new Date(item.publishedAt).toISOString() : undefined,
            entityType: () => 'STORY',
            version: () => 1,
        },
    },
    businesses: {
        entityType: 'BUSINESS',
        sourceTable: 'businesses',
        keyMapping: {
            pk: (item) => `BUSINESS#${item.id}`,
            sk: () => 'METADATA',
            gsi1pk: (item) => `BUSINESS_CATEGORY#${item.category || 'general'}`,
            gsi1sk: (item) => `NAME#${item.name}`,
            gsi3pk: (item) => `BUSINESS_STATUS#${item.status || 'ACTIVE'}`,
            gsi3sk: (item) => `UPDATED#${item.updatedAt || new Date().toISOString()}`,
        },
        fieldMapping: {
            businessId: 'id',
            'profile.name': 'name',
            'profile.description': 'description',
            'profile.mission': 'mission',
            'profile.foundedYear': 'foundedYear',
            'profile.founderStory': 'founderStory',
            'profile.website': 'website',
            'profile.socialMedia': (item) => item.socialMedia ? JSON.parse(item.socialMedia) : {},
            'profile.contact.email': 'email',
            'profile.contact.phone': 'phone',
            'profile.logo': 'logo',
            'profile.coverImage': 'coverImage',
            'profile.gallery': (item) => item.gallery ? JSON.parse(item.gallery) : [],
            type: (item) => item.type || 'wellness_center',
            status: (item) => item.status || 'active',
            certifications: (item) => item.certifications ? JSON.parse(item.certifications) : [],
            specialties: (item) => item.specialties ? JSON.parse(item.specialties) : [],
            servicesOffered: (item) => item.servicesOffered ? JSON.parse(item.servicesOffered) : [],
            targetAudience: (item) => item.targetAudience ? JSON.parse(item.targetAudience) : [],
            culturalCompetencies: (item) => item.culturalCompetencies ? JSON.parse(item.culturalCompetencies) : [],
            'metrics.rating': (item) => item.rating || 0,
            'metrics.reviewCount': (item) => item.reviewCount || 0,
            'metrics.trustScore': (item) => item.trustScore || 0,
            'metrics.responseRate': (item) => item.responseRate || 0,
            'metrics.averageResponseTime': (item) => item.averageResponseTime || 0,
            'metrics.repeatCustomerRate': (item) => item.repeatCustomerRate || 0,
            ownerId: 'ownerId',
            verifiedAt: (item) => item.verifiedAt ? new Date(item.verifiedAt).toISOString() : undefined,
            featuredUntil: (item) => item.featuredUntil ? new Date(item.featuredUntil).toISOString() : undefined,
            entityType: () => 'BUSINESS',
            version: () => 1,
        },
    },
    resources: {
        entityType: 'RESOURCE',
        sourceTable: 'resources',
        keyMapping: {
            pk: (item) => `RESOURCE#${item.id}`,
            sk: () => 'METADATA',
            gsi1pk: (item) => `RESOURCE_TYPE#${item.type}`,
            gsi1sk: (item) => `CREATED#${item.createdAt || new Date().toISOString()}`,
            gsi2pk: (item) => `RESOURCE_CATEGORY#${item.category}`,
            gsi2sk: (item) => `TITLE#${item.title}`,
            gsi3pk: (item) => `RESOURCE_STATUS#${item.status || 'PUBLISHED'}`,
            gsi3sk: (item) => `UPDATED#${item.updatedAt || new Date().toISOString()}`,
            gsi4pk: (item) => `TENANT#${item.tenantId || 'default'}#RESOURCES`,
            gsi4sk: (item) => `CREATED#${item.createdAt || new Date().toISOString()}`,
        },
        fieldMapping: {
            resourceId: 'id',
            title: 'title',
            description: 'description',
            content: 'content',
            summary: 'summary',
            type: (item) => item.type || 'article',
            category: 'category',
            subcategories: (item) => item.subcategories ? JSON.parse(item.subcategories) : [],
            status: (item) => item.status || 'published',
            'author.id': 'authorId',
            'author.name': 'authorName',
            'author.credentials': (item) => item.authorCredentials ? JSON.parse(item.authorCredentials) : [],
            'author.bio': 'authorBio',
            'author.avatar': 'authorAvatar',
            'author.isVerified': (item) => item.authorIsVerified === true,
            'author.specialties': (item) => item.authorSpecialties ? JSON.parse(item.authorSpecialties) : [],
            'metadata.readTime': (item) => item.readTime || 5,
            'metadata.difficulty': (item) => item.difficulty || 'beginner',
            'metadata.prerequisites': (item) => item.prerequisites ? JSON.parse(item.prerequisites) : [],
            'metadata.learningObjectives': (item) => item.learningObjectives ? JSON.parse(item.learningObjectives) : [],
            'metadata.culturalConsiderations': (item) => item.culturalConsiderations ? JSON.parse(item.culturalConsiderations) : [],
            'metadata.therapeuticValue': (item) => item.therapeuticValue ? JSON.parse(item.therapeuticValue) : [],
            'metadata.evidenceBased': (item) => item.evidenceBased === true,
            'engagement.views': (item) => item.views || 0,
            'engagement.likes': (item) => item.likes || 0,
            'engagement.saves': (item) => item.saves || 0,
            'engagement.shares': (item) => item.shares || 0,
            'engagement.helpfulVotes': (item) => item.helpfulVotes || 0,
            'engagement.averageRating': (item) => item.averageRating || 0,
            'engagement.ratingCount': (item) => item.ratingCount || 0,
            tags: (item) => item.tags ? JSON.parse(item.tags) : [],
            relatedResources: (item) => item.relatedResources ? JSON.parse(item.relatedResources) : [],
            externalUrl: 'externalUrl',
            downloadUrl: 'downloadUrl',
            thumbnailUrl: 'thumbnailUrl',
            isPublic: (item) => item.isPublic !== false,
            isPremium: (item) => item.isPremium === true,
            publishedAt: (item) => item.publishedAt ? new Date(item.publishedAt).toISOString() : undefined,
            entityType: () => 'RESOURCE',
            version: () => 1,
        },
    },
};
//# sourceMappingURL=migration-types.js.map