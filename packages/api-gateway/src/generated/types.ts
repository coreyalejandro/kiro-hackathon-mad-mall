/**
 * Generated types from Smithy IDL definitions
 * This is a placeholder file that would normally be generated by Smithy tooling
 */

// Common types
export type Id = string;
export type Email = string;
export type Url = string;

// Enums
export enum HealthStatus {
  HEALTHY = 'healthy',
  DEGRADED = 'degraded',
  UNHEALTHY = 'unhealthy'
}

export enum StoryType {
  PERSONAL_EXPERIENCE = 'personal_experience',
  MILESTONE_CELEBRATION = 'milestone_celebration',
  CHALLENGE_OVERCOME = 'challenge_overcome',
  ADVICE_SHARING = 'advice_sharing',
  GRATITUDE_EXPRESSION = 'gratitude_expression',
  AWARENESS_RAISING = 'awareness_raising'
}

export enum StoryStatus {
  DRAFT = 'draft',
  PUBLISHED = 'published',
  ARCHIVED = 'archived',
  FLAGGED = 'flagged',
  REMOVED = 'removed'
}

export enum ContentModerationStatus {
  PENDING = 'pending',
  APPROVED = 'approved',
  REJECTED = 'rejected',
  NEEDS_REVIEW = 'needs_review'
}

export enum CircleType {
  SUPPORT_GROUP = 'support_group',
  INTEREST_BASED = 'interest_based',
  LOCATION_BASED = 'location_based',
  DIAGNOSIS_STAGE = 'diagnosis_stage',
  WELLNESS_FOCUS = 'wellness_focus',
  CULTURAL_AFFINITY = 'cultural_affinity'
}

export enum CirclePrivacyLevel {
  PUBLIC = 'public',
  PRIVATE = 'private',
  INVITE_ONLY = 'invite_only',
  CLOSED = 'closed'
}

export enum ModerationLevel {
  LIGHT = 'light',
  MODERATE = 'moderate',
  STRICT = 'strict'
}

export enum BusinessType {
  WELLNESS_CENTER = 'wellness_center',
  HEALTHCARE_PROVIDER = 'healthcare_provider',
  SUPPLEMENT_BRAND = 'supplement_brand',
  FITNESS_STUDIO = 'fitness_studio',
  MENTAL_HEALTH_SERVICE = 'mental_health_service',
  NUTRITION_SERVICE = 'nutrition_service',
  BEAUTY_WELLNESS = 'beauty_wellness',
  LIFESTYLE_BRAND = 'lifestyle_brand',
  EDUCATIONAL_SERVICE = 'educational_service'
}

export enum BusinessStatus {
  ACTIVE = 'active',
  PENDING_VERIFICATION = 'pending_verification',
  SUSPENDED = 'suspended',
  INACTIVE = 'inactive'
}

export enum DiagnosisStage {
  NEWLY_DIAGNOSED = 'newly_diagnosed',
  ADJUSTING = 'adjusting',
  MANAGING_WELL = 'managing_well',
  EXPERIENCED = 'experienced',
  COMPLICATIONS = 'complications',
  REMISSION = 'remission'
}

export enum CommunicationStyle {
  DIRECT_SUPPORTIVE = 'direct_supportive',
  GENTLE_ENCOURAGING = 'gentle_encouraging',
  HUMOR_BASED = 'humor_based',
  SPIRITUAL_GROUNDED = 'spiritual_grounded',
  NO_PREFERENCE = 'no_preference'
}

export enum ProfileVisibility {
  PUBLIC = 'public',
  CIRCLES_ONLY = 'circles_only',
  PRIVATE = 'private'
}

export enum InteractionType {
  LIKE = 'like',
  UNLIKE = 'unlike',
  SAVE = 'save',
  UNSAVE = 'unsave',
  SHARE = 'share',
  REPORT = 'report',
  HELPFUL = 'helpful',
  NOT_HELPFUL = 'not_helpful'
}

export enum ContentType {
  STORY = 'story',
  DISCUSSION = 'discussion',
  RESOURCE = 'resource',
  PRODUCT = 'product',
  BUSINESS = 'business',
  COMEDY = 'comedy',
  USER = 'user',
  CIRCLE = 'circle'
}

// Structures
export interface PaginationOutput {
  nextToken?: string;
  totalCount: number;
  itemCount: number;
}

export interface StoryAuthor {
  id: Id;
  displayName: string;
  avatar?: Url;
  isVerified: boolean;
}

export interface StoryEngagement {
  likes: number;
  comments: number;
  shares: number;
  saves: number;
  views: number;
  helpfulVotes: number;
}

export interface StoryMetadata {
  readTime: number;
  wordCount: number;
  culturalElements: string[];
  therapeuticValue: string[];
  triggerWarnings?: string[];
  ageAppropriate: boolean;
}

export interface Story {
  id: Id;
  title: string;
  content: string;
  excerpt?: string;
  author: StoryAuthor;
  type: StoryType;
  status: StoryStatus;
  themes: string[];
  tags: string[];
  circleId?: Id;
  engagement: StoryEngagement;
  metadata: StoryMetadata;
  moderationStatus: ContentModerationStatus;
  moderationNotes?: string;
  featuredAt?: Date;
  publishedAt?: Date;
  createdAt: Date;
  updatedAt: Date;
}

export interface ComedyContent {
  id: Id;
  title: string;
  content: string;
  author: StoryAuthor;
  category: string;
  tags: string[];
  contentType: string;
  culturalStyle: string;
  appropriatenessRating: string;
  likes: number;
  shares: number;
  views: number;
  isFeatured: boolean;
  publishedAt: Date;
  createdAt: Date;
  updatedAt: Date;
}

export interface Discussion {
  id: Id;
  title: string;
  content: string;
  author: StoryAuthor;
  circleId: Id;
  tags: string[];
  replies: number;
  lastActivity: Date;
  isPinned: boolean;
  isLocked: boolean;
  moderationStatus: ContentModerationStatus;
  createdAt: Date;
  updatedAt: Date;
}

export interface Resource {
  id: Id;
  title: string;
  content: string;
  excerpt: string;
  author: StoryAuthor;
  category: string;
  tags: string[];
  readTime: number;
  difficulty: string;
  culturalRelevance: string[];
  therapeuticValue: string[];
  views: number;
  saves: number;
  helpfulVotes: number;
  isFeatured: boolean;
  publishedAt: Date;
  createdAt: Date;
  updatedAt: Date;
}

export interface ProductPrice {
  amount: number;
  currency: string;
  originalPrice?: number;
  discountPercentage?: number;
}

export interface ProductAvailability {
  inStock: boolean;
  quantity?: number;
  restockDate?: Date;
}

export interface ProductShipping {
  freeShipping: boolean;
  shippingCost?: number;
  estimatedDelivery: string;
  internationalShipping: boolean;
}

export interface Product {
  id: Id;
  businessId: Id;
  name: string;
  description: string;
  category: string;
  subcategory?: string;
  price: ProductPrice;
  images: string[];
  specifications: Record<string, string>;
  ingredients: string[];
  benefits: string[];
  culturalRelevance: string[];
  certifications: string[];
  availability: ProductAvailability;
  shipping: ProductShipping;
  rating: number;
  reviewCount: number;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

export interface CircleSettings {
  isPrivate: boolean;
  requireApproval: boolean;
  maxMembers?: number;
  culturalFocus?: string[];
  allowGuestPosts: boolean;
  moderationLevel: ModerationLevel;
  contentGuidelines?: string;
  meetingSchedule?: any;
}

export interface CircleStats {
  memberCount: number;
  activeMembers: number;
  postsThisWeek: number;
  postsThisMonth: number;
  engagementRate: number;
  averageResponseTime: number;
}

export interface Circle {
  id: Id;
  name: string;
  description: string;
  type: CircleType;
  privacyLevel: CirclePrivacyLevel;
  settings: CircleSettings;
  members: any[];
  moderators: string[];
  tags: string[];
  coverImage?: Url;
  stats: CircleStats;
  createdBy: Id;
  createdAt: Date;
  updatedAt: Date;
  isActive: boolean;
}

export interface BusinessProfile {
  name: string;
  description: string;
  mission?: string;
  foundedYear?: number;
  founderStory?: string;
  website?: Url;
  socialMedia: Record<string, string>;
  contact: {
    email: Email;
    phone?: string;
    address?: any;
  };
  logo?: Url;
  coverImage?: Url;
  gallery: string[];
}

export interface BusinessMetrics {
  rating: number;
  reviewCount: number;
  trustScore: number;
  responseRate: number;
  averageResponseTime: number;
  repeatCustomerRate: number;
}

export interface Business {
  id: Id;
  profile: BusinessProfile;
  type: BusinessType;
  status: BusinessStatus;
  certifications: string[];
  specialties: string[];
  servicesOffered: string[];
  targetAudience: string[];
  culturalCompetencies: string[];
  metrics: BusinessMetrics;
  ownerId: Id;
  verifiedAt?: Date;
  featuredUntil?: Date;
  createdAt: Date;
  updatedAt: Date;
}

export interface CommunityEvent {
  id: Id;
  title: string;
  description: string;
  type: string;
  startTime: Date;
  endTime?: Date;
  organizer: string;
  circleId?: Id;
  isVirtual: boolean;
  location?: string;
  maxAttendees: number;
  currentAttendees: number;
}

export interface TodaysHighlights {
  featuredStory: Story;
  trendingCircle: Circle;
  newBusinessSpotlight: Business;
  communityMilestone: string;
  dailyWellnessTip: string;
  upcomingEvents: CommunityEvent[];
}

export interface CommunityStats {
  totalUsers: number;
  activeUsers: number;
  totalCircles: number;
  totalStories: number;
  totalBusinesses: number;
  totalProducts: number;
  storiesThisWeek: number;
  newMembersThisWeek: number;
  engagementRate: number;
  averageSessionTime: number;
}

export interface SearchResultItem {
  id: Id;
  type: ContentType;
  title: string;
  description?: string;
  score: number;
  metadata: Record<string, any>;
  url?: string;
  thumbnail?: Url;
  createdAt: Date;
  updatedAt: Date;
}

export interface UserProfile {
  firstName: string;
  lastName: string;
  bio?: string;
  culturalBackground: string[];
  communicationStyle: CommunicationStyle;
  diagnosisStage: DiagnosisStage;
  supportNeeds: string[];
  location?: {
    city: string;
    state: string;
    country: string;
  };
  joinDate: Date;
  lastActive: Date;
}

export interface UserPreferences {
  profileVisibility: ProfileVisibility;
  showRealName: boolean;
  allowDirectMessages: boolean;
  shareHealthJourney: boolean;
  emailNotifications: boolean;
  pushNotifications: boolean;
  weeklyDigest: boolean;
  circleNotifications: boolean;
  contentPreferences: string[];
  circleInterests: string[];
}

export interface AccessibilitySettings {
  highContrast: boolean;
  largeText: boolean;
  screenReader: boolean;
  reducedMotion: boolean;
}

export interface UserSettings {
  theme: string;
  language: string;
  timezone: string;
  accessibility: AccessibilitySettings;
}

export interface UserStats {
  storiesShared: number;
  circlesJoined: number;
  commentsPosted: number;
  helpfulVotes: number;
  daysActive: number;
  streakDays: number;
}

export interface User {
  id: Id;
  email: Email;
  profile: UserProfile;
  preferences: UserPreferences;
  settings: UserSettings;
  primaryGoals: string[];
  isVerified: boolean;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
  version: number;
  stats?: UserStats;
}

// Input/Output types
export interface GetHealthInput {}

export interface GetHealthOutput {
  status: HealthStatus;
  message: string;
  timestamp: Date;
  dataInitialized: boolean;
  services?: Record<string, any>;
}

export interface GetStatsOutput {
  stats: CommunityStats;
  timestamp: Date;
}

export interface GetHighlightsOutput {
  highlights: TodaysHighlights;
  timestamp: Date;
}

export interface GetStoriesOutput {
  stories: Story[];
  pagination?: PaginationOutput;
}

export interface GetFeaturedStoriesOutput {
  stories: Story[];
}

export interface GetComedyOutput {
  comedy: ComedyContent[];
  pagination?: PaginationOutput;
}

export interface GetFeaturedComedyOutput {
  comedy: ComedyContent[];
}

export interface GetDiscussionsOutput {
  discussions: Discussion[];
  pagination?: PaginationOutput;
}

export interface GetActiveDiscussionsOutput {
  discussions: Discussion[];
}

export interface GetResourcesOutput {
  resources: Resource[];
  pagination?: PaginationOutput;
}

export interface GetFeaturedResourcesOutput {
  resources: Resource[];
}

export interface GetProductsOutput {
  products: Product[];
  pagination?: PaginationOutput;
}

export interface GetFeaturedProductsOutput {
  products: Product[];
}

export interface GetUserProfilesOutput {
  users: User[];
  pagination?: PaginationOutput;
}

export interface SearchOutput {
  results: SearchResultItem[];
  totalCount: number;
  query: string;
  searchTime: number;
  suggestions?: string[];
}

export interface GetRecommendationsOutput {
  recommendations: SearchResultItem[];
  recommendationType: string;
  confidence: number;
}

export interface GetCategoriesOutput {
  categories: string[];
  contentType: string;
}

export interface ContentInteractionOutput {
  success: boolean;
  message: string;
  updatedCounts?: Record<string, any>;
}