"use strict";
/**
 * Image Asset DAO Implementation
 * Data access operations for ImageAsset entities
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImageAssetDynamoDAO = void 0;
const base_dao_1 = require("./base-dao");
const shared_types_1 = require("@madmall/shared-types");
const shared_types_2 = require("@madmall/shared-types");
class ImageAssetDynamoDAO extends base_dao_1.BaseDynamoDAO {
    constructor(dynamoService) {
        super(dynamoService, 'IMAGE');
    }
    validateEntitySpecific(entity) {
        return shared_types_2.DataValidator.validateImageAsset(entity);
    }
    async getById(imageId) {
        const { PK, SK } = shared_types_1.KeyPatterns.IMAGE_METADATA(imageId);
        return await super.getById(PK, SK);
    }
    async getByCategory(category, options) {
        return await this.queryGSI('GSI1', `IMAGE_CATEGORY#${category}`, undefined, options);
    }
    async getByStatus(status, options) {
        return await this.queryGSI('GSI3', `IMAGE_STATUS#${status}`, undefined, options);
    }
    async searchByTags(tags, options) {
        const filters = this.buildContainsFilter('tags', tags);
        return await this.queryGSI('GSI1', 'IMAGE_CATEGORY#', undefined, this.mergeQueryOptions(options, filters));
    }
    async markStatus(imageId, status, notes) {
        const { PK, SK } = shared_types_1.KeyPatterns.IMAGE_METADATA(imageId);
        const updateExpressionParts = ['#status = :status'];
        const names = { '#status': 'status' };
        const values = { ':status': status };
        if (notes) {
            updateExpressionParts.push('#validation.#issues = list_append(if_not_exists(#validation.#issues, :emptyList), :notes)');
            names['#validation'] = 'validation';
            names['#issues'] = 'issues';
            values[':notes'] = [notes];
            values[':emptyList'] = [];
        }
        return await this.dynamoService.updateItem(PK, SK, {
            updateExpression: `SET ${updateExpressionParts.join(', ')}`,
            expressionAttributeNames: names,
            expressionAttributeValues: values,
            returnValues: 'ALL_NEW',
        });
    }
}
exports.ImageAssetDynamoDAO = ImageAssetDynamoDAO;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtYXNzZXQtZGFvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Rhby9pbWFnZS1hc3NldC1kYW8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgseUNBQTJDO0FBRTNDLHdEQUF3RTtBQUN4RSx3REFBd0U7QUFHeEUsTUFBYSxtQkFBb0IsU0FBUSx3QkFBaUM7SUFDeEUsWUFBWSxhQUE4QjtRQUN4QyxLQUFLLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFUyxzQkFBc0IsQ0FBQyxNQUEwQjtRQUN6RCxPQUFPLDRCQUFhLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBZTtRQUMzQixNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLDBCQUFXLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZELE9BQU8sTUFBTSxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsS0FBSyxDQUFDLGFBQWEsQ0FBQyxRQUFnQixFQUFFLE9BQXNCO1FBQzFELE9BQU8sTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxrQkFBa0IsUUFBUSxFQUFFLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQWMsRUFBRSxPQUFzQjtRQUN0RCxPQUFPLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLE1BQU0sRUFBRSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFjLEVBQUUsT0FBc0I7UUFDdkQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN2RCxPQUFPLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUM3RyxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFlLEVBQUUsTUFBb0MsRUFBRSxLQUFjO1FBQ3BGLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsMEJBQVcsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkQsTUFBTSxxQkFBcUIsR0FBYSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDOUQsTUFBTSxLQUFLLEdBQTJCLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxDQUFDO1FBQzlELE1BQU0sTUFBTSxHQUF3QixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsQ0FBQztRQUMxRCxJQUFJLEtBQUssRUFBRSxDQUFDO1lBQ1YscUJBQXFCLENBQUMsSUFBSSxDQUFDLDJGQUEyRixDQUFDLENBQUM7WUFDeEgsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLFlBQVksQ0FBQztZQUNwQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsUUFBUSxDQUFDO1lBQzVCLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNCLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDNUIsQ0FBQztRQUNELE9BQU8sTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBcUIsRUFBRSxFQUFFLEVBQUUsRUFBRTtZQUNyRSxnQkFBZ0IsRUFBRSxPQUFPLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMzRCx3QkFBd0IsRUFBRSxLQUFLO1lBQy9CLHlCQUF5QixFQUFFLE1BQU07WUFDakMsWUFBWSxFQUFFLFNBQVM7U0FDeEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBOUNELGtEQThDQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW1hZ2UgQXNzZXQgREFPIEltcGxlbWVudGF0aW9uXG4gKiBEYXRhIGFjY2VzcyBvcGVyYXRpb25zIGZvciBJbWFnZUFzc2V0IGVudGl0aWVzXG4gKi9cblxuaW1wb3J0IHsgQmFzZUR5bmFtb0RBTyB9IGZyb20gJy4vYmFzZS1kYW8nO1xuaW1wb3J0IHsgUXVlcnlPcHRpb25zLCBRdWVyeVJlc3VsdCB9IGZyb20gJ0BtYWRtYWxsL3NoYXJlZC10eXBlcyc7XG5pbXBvcnQgeyBEeW5hbW9EQkltYWdlQXNzZXQsIEtleVBhdHRlcm5zIH0gZnJvbSAnQG1hZG1hbGwvc2hhcmVkLXR5cGVzJztcbmltcG9ydCB7IERhdGFWYWxpZGF0b3IsIFZhbGlkYXRpb25SZXN1bHQgfSBmcm9tICdAbWFkbWFsbC9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHsgRHluYW1vREJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZHluYW1vZGItc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBJbWFnZUFzc2V0RHluYW1vREFPIGV4dGVuZHMgQmFzZUR5bmFtb0RBTzxEeW5hbW9EQkltYWdlQXNzZXQ+IHtcbiAgY29uc3RydWN0b3IoZHluYW1vU2VydmljZTogRHluYW1vREJTZXJ2aWNlKSB7XG4gICAgc3VwZXIoZHluYW1vU2VydmljZSwgJ0lNQUdFJyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdmFsaWRhdGVFbnRpdHlTcGVjaWZpYyhlbnRpdHk6IER5bmFtb0RCSW1hZ2VBc3NldCk6IFZhbGlkYXRpb25SZXN1bHQge1xuICAgIHJldHVybiBEYXRhVmFsaWRhdG9yLnZhbGlkYXRlSW1hZ2VBc3NldChlbnRpdHkpO1xuICB9XG5cbiAgYXN5bmMgZ2V0QnlJZChpbWFnZUlkOiBzdHJpbmcpOiBQcm9taXNlPER5bmFtb0RCSW1hZ2VBc3NldCB8IG51bGw+IHtcbiAgICBjb25zdCB7IFBLLCBTSyB9ID0gS2V5UGF0dGVybnMuSU1BR0VfTUVUQURBVEEoaW1hZ2VJZCk7XG4gICAgcmV0dXJuIGF3YWl0IHN1cGVyLmdldEJ5SWQoUEssIFNLKTtcbiAgfVxuXG4gIGFzeW5jIGdldEJ5Q2F0ZWdvcnkoY2F0ZWdvcnk6IHN0cmluZywgb3B0aW9ucz86IFF1ZXJ5T3B0aW9ucyk6IFByb21pc2U8UXVlcnlSZXN1bHQ8RHluYW1vREJJbWFnZUFzc2V0Pj4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnF1ZXJ5R1NJKCdHU0kxJywgYElNQUdFX0NBVEVHT1JZIyR7Y2F0ZWdvcnl9YCwgdW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIGdldEJ5U3RhdHVzKHN0YXR1czogc3RyaW5nLCBvcHRpb25zPzogUXVlcnlPcHRpb25zKTogUHJvbWlzZTxRdWVyeVJlc3VsdDxEeW5hbW9EQkltYWdlQXNzZXQ+PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucXVlcnlHU0koJ0dTSTMnLCBgSU1BR0VfU1RBVFVTIyR7c3RhdHVzfWAsIHVuZGVmaW5lZCwgb3B0aW9ucyk7XG4gIH1cblxuICBhc3luYyBzZWFyY2hCeVRhZ3ModGFnczogc3RyaW5nW10sIG9wdGlvbnM/OiBRdWVyeU9wdGlvbnMpOiBQcm9taXNlPFF1ZXJ5UmVzdWx0PER5bmFtb0RCSW1hZ2VBc3NldD4+IHtcbiAgICBjb25zdCBmaWx0ZXJzID0gdGhpcy5idWlsZENvbnRhaW5zRmlsdGVyKCd0YWdzJywgdGFncyk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucXVlcnlHU0koJ0dTSTEnLCAnSU1BR0VfQ0FURUdPUlkjJywgdW5kZWZpbmVkLCB0aGlzLm1lcmdlUXVlcnlPcHRpb25zKG9wdGlvbnMsIGZpbHRlcnMpKTtcbiAgfVxuXG4gIGFzeW5jIG1hcmtTdGF0dXMoaW1hZ2VJZDogc3RyaW5nLCBzdGF0dXM6IER5bmFtb0RCSW1hZ2VBc3NldFsnc3RhdHVzJ10sIG5vdGVzPzogc3RyaW5nKTogUHJvbWlzZTxEeW5hbW9EQkltYWdlQXNzZXQ+IHtcbiAgICBjb25zdCB7IFBLLCBTSyB9ID0gS2V5UGF0dGVybnMuSU1BR0VfTUVUQURBVEEoaW1hZ2VJZCk7XG4gICAgY29uc3QgdXBkYXRlRXhwcmVzc2lvblBhcnRzOiBzdHJpbmdbXSA9IFsnI3N0YXR1cyA9IDpzdGF0dXMnXTtcbiAgICBjb25zdCBuYW1lczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHsgJyNzdGF0dXMnOiAnc3RhdHVzJyB9O1xuICAgIGNvbnN0IHZhbHVlczogUmVjb3JkPHN0cmluZywgYW55PiA9IHsgJzpzdGF0dXMnOiBzdGF0dXMgfTtcbiAgICBpZiAobm90ZXMpIHtcbiAgICAgIHVwZGF0ZUV4cHJlc3Npb25QYXJ0cy5wdXNoKCcjdmFsaWRhdGlvbi4jaXNzdWVzID0gbGlzdF9hcHBlbmQoaWZfbm90X2V4aXN0cygjdmFsaWRhdGlvbi4jaXNzdWVzLCA6ZW1wdHlMaXN0KSwgOm5vdGVzKScpO1xuICAgICAgbmFtZXNbJyN2YWxpZGF0aW9uJ10gPSAndmFsaWRhdGlvbic7XG4gICAgICBuYW1lc1snI2lzc3VlcyddID0gJ2lzc3Vlcyc7XG4gICAgICB2YWx1ZXNbJzpub3RlcyddID0gW25vdGVzXTtcbiAgICAgIHZhbHVlc1snOmVtcHR5TGlzdCddID0gW107XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzLmR5bmFtb1NlcnZpY2UudXBkYXRlSXRlbTxEeW5hbW9EQkltYWdlQXNzZXQ+KFBLLCBTSywge1xuICAgICAgdXBkYXRlRXhwcmVzc2lvbjogYFNFVCAke3VwZGF0ZUV4cHJlc3Npb25QYXJ0cy5qb2luKCcsICcpfWAsXG4gICAgICBleHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IG5hbWVzLFxuICAgICAgZXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogdmFsdWVzLFxuICAgICAgcmV0dXJuVmFsdWVzOiAnQUxMX05FVycsXG4gICAgfSk7XG4gIH1cbn1cblxuIl19