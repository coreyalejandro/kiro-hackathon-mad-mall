"use strict";
/**
 * Advisory Review DAO Implementation
 * Cultural advisory board review queue and decisions
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AdvisoryReviewDynamoDAO = void 0;
const base_dao_1 = require("./base-dao");
const shared_types_1 = require("@madmall/shared-types");
const shared_types_2 = require("@madmall/shared-types");
class AdvisoryReviewDynamoDAO extends base_dao_1.BaseDynamoDAO {
    constructor(dynamoService) {
        super(dynamoService, 'ADVISORY_REVIEW');
    }
    validateEntitySpecific(entity) {
        return shared_types_2.DataValidator.validateAdvisoryReview(entity);
    }
    async enqueue(input) {
        const now = new Date().toISOString();
        const keys = shared_types_1.KeyPatterns.ADVISORY_QUEUE(input.reviewId);
        const gsi1 = shared_types_1.KeyPatterns.ADVISORY_BY_TARGET(input.targetType, input.targetId);
        const item = {
            ...input,
            ...keys,
            ...gsi1,
            entityType: 'ADVISORY_REVIEW',
            version: 1,
            createdAt: now,
            updatedAt: now,
        };
        const validation = this.validateEntity(item);
        if (!validation.isValid) {
            throw new Error(`Advisory review validation failed: ${validation.errors.map((e) => e.message).join(', ')}`);
        }
        return await this.dynamoService.putItem(item);
    }
    async listQueue(options) {
        return await this.query('ADVISORY#QUEUE', options);
    }
    async listByTarget(targetType, targetId, options) {
        return await this.queryGSI('GSI1', `REVIEW_TARGET#${targetType}#${targetId}`, undefined, options);
    }
    async updateStatus(reviewId, status) {
        const { PK, SK } = shared_types_1.KeyPatterns.ADVISORY_QUEUE(reviewId);
        return await this.dynamoService.updateItem(PK, SK, {
            updateExpression: 'SET #status = :status, #updatedAt = :updatedAt',
            expressionAttributeNames: { '#status': 'status', '#updatedAt': 'updatedAt' },
            expressionAttributeValues: { ':status': status, ':updatedAt': new Date().toISOString() },
            returnValues: 'ALL_NEW',
        });
    }
    async addDecision(reviewId, decision) {
        const { PK, SK } = shared_types_1.KeyPatterns.ADVISORY_QUEUE(reviewId);
        const decidedAt = decision.decidedAt || new Date().toISOString();
        return await this.dynamoService.updateItem(PK, SK, {
            updateExpression: 'SET #decisions = list_append(if_not_exists(#decisions, :empty), :decision), #updatedAt = :updatedAt',
            expressionAttributeNames: { '#decisions': 'decisions', '#updatedAt': 'updatedAt' },
            expressionAttributeValues: { ':decision': [{ ...decision, decidedAt }], ':empty': [], ':updatedAt': decidedAt },
            returnValues: 'ALL_NEW',
        });
    }
}
exports.AdvisoryReviewDynamoDAO = AdvisoryReviewDynamoDAO;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWR2aXNvcnktcmV2aWV3LWRhby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYW8vYWR2aXNvcnktcmV2aWV3LWRhby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7QUFFSCx5Q0FBMkM7QUFFM0Msd0RBQTRFO0FBQzVFLHdEQUF5RjtBQUd6RixNQUFhLHVCQUF3QixTQUFRLHdCQUFxQztJQUNoRixZQUFZLGFBQThCO1FBQ3hDLEtBQUssQ0FBQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRVMsc0JBQXNCLENBQUMsTUFBOEI7UUFDN0QsT0FBTyw0QkFBYSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQW1HO1FBQy9HLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDckMsTUFBTSxJQUFJLEdBQUcsMEJBQVcsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sSUFBSSxHQUFHLDBCQUFXLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUUsTUFBTSxJQUFJLEdBQTJCO1lBQ25DLEdBQUcsS0FBSztZQUNSLEdBQUcsSUFBSTtZQUNQLEdBQUcsSUFBSTtZQUNQLFVBQVUsRUFBRSxpQkFBaUI7WUFDN0IsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUsR0FBRztZQUNkLFNBQVMsRUFBRSxHQUFHO1NBQ1csQ0FBQztRQUU1QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFrQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvSCxDQUFDO1FBRUQsT0FBTyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQXNCO1FBQ3BDLE9BQU8sTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWSxDQUFDLFVBQWtCLEVBQUUsUUFBZ0IsRUFBRSxPQUFzQjtRQUM3RSxPQUFPLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLFVBQVUsSUFBSSxRQUFRLEVBQUUsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEcsQ0FBQztJQUVELEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBZ0IsRUFBRSxNQUF3QztRQUMzRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLDBCQUFXLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3hELE9BQU8sTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBeUIsRUFBRSxFQUFFLEVBQUUsRUFBRTtZQUN6RSxnQkFBZ0IsRUFBRSxnREFBZ0Q7WUFDbEUsd0JBQXdCLEVBQUUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUU7WUFDNUUseUJBQXlCLEVBQUUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3hGLFlBQVksRUFBRSxTQUFTO1NBQ3hCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQWdCLEVBQUUsUUFBMkg7UUFDN0osTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRywwQkFBVyxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4RCxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsU0FBUyxJQUFJLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDakUsT0FBTyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUF5QixFQUFFLEVBQUUsRUFBRSxFQUFFO1lBQ3pFLGdCQUFnQixFQUFFLHFHQUFxRztZQUN2SCx3QkFBd0IsRUFBRSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRTtZQUNsRix5QkFBeUIsRUFBRSxFQUFFLFdBQVcsRUFBRSxDQUFDLEVBQUUsR0FBRyxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUU7WUFDL0csWUFBWSxFQUFFLFNBQVM7U0FDeEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBM0RELDBEQTJEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQWR2aXNvcnkgUmV2aWV3IERBTyBJbXBsZW1lbnRhdGlvblxuICogQ3VsdHVyYWwgYWR2aXNvcnkgYm9hcmQgcmV2aWV3IHF1ZXVlIGFuZCBkZWNpc2lvbnNcbiAqL1xuXG5pbXBvcnQgeyBCYXNlRHluYW1vREFPIH0gZnJvbSAnLi9iYXNlLWRhbyc7XG5pbXBvcnQgeyBRdWVyeU9wdGlvbnMsIFF1ZXJ5UmVzdWx0IH0gZnJvbSAnQG1hZG1hbGwvc2hhcmVkLXR5cGVzJztcbmltcG9ydCB7IER5bmFtb0RCQWR2aXNvcnlSZXZpZXcsIEtleVBhdHRlcm5zIH0gZnJvbSAnQG1hZG1hbGwvc2hhcmVkLXR5cGVzJztcbmltcG9ydCB7IERhdGFWYWxpZGF0b3IsIFZhbGlkYXRpb25SZXN1bHQsIFZhbGlkYXRpb25FcnJvciB9IGZyb20gJ0BtYWRtYWxsL3NoYXJlZC10eXBlcyc7XG5pbXBvcnQgeyBEeW5hbW9EQlNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9keW5hbW9kYi1zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIEFkdmlzb3J5UmV2aWV3RHluYW1vREFPIGV4dGVuZHMgQmFzZUR5bmFtb0RBTzxEeW5hbW9EQkFkdmlzb3J5UmV2aWV3PiB7XG4gIGNvbnN0cnVjdG9yKGR5bmFtb1NlcnZpY2U6IER5bmFtb0RCU2VydmljZSkge1xuICAgIHN1cGVyKGR5bmFtb1NlcnZpY2UsICdBRFZJU09SWV9SRVZJRVcnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB2YWxpZGF0ZUVudGl0eVNwZWNpZmljKGVudGl0eTogRHluYW1vREJBZHZpc29yeVJldmlldyk6IFZhbGlkYXRpb25SZXN1bHQge1xuICAgIHJldHVybiBEYXRhVmFsaWRhdG9yLnZhbGlkYXRlQWR2aXNvcnlSZXZpZXcoZW50aXR5KTtcbiAgfVxuXG4gIGFzeW5jIGVucXVldWUoaW5wdXQ6IE9taXQ8RHluYW1vREJBZHZpc29yeVJldmlldywgJ2NyZWF0ZWRBdCcgfCAndXBkYXRlZEF0JyB8ICd2ZXJzaW9uJyB8ICdQSycgfCAnU0snIHwgJ0dTSTFQSyc+KTogUHJvbWlzZTxEeW5hbW9EQkFkdmlzb3J5UmV2aWV3PiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIGNvbnN0IGtleXMgPSBLZXlQYXR0ZXJucy5BRFZJU09SWV9RVUVVRShpbnB1dC5yZXZpZXdJZCk7XG4gICAgY29uc3QgZ3NpMSA9IEtleVBhdHRlcm5zLkFEVklTT1JZX0JZX1RBUkdFVChpbnB1dC50YXJnZXRUeXBlLCBpbnB1dC50YXJnZXRJZCk7XG4gICAgY29uc3QgaXRlbTogRHluYW1vREJBZHZpc29yeVJldmlldyA9IHtcbiAgICAgIC4uLmlucHV0LFxuICAgICAgLi4ua2V5cyxcbiAgICAgIC4uLmdzaTEsXG4gICAgICBlbnRpdHlUeXBlOiAnQURWSVNPUllfUkVWSUVXJyxcbiAgICAgIHZlcnNpb246IDEsXG4gICAgICBjcmVhdGVkQXQ6IG5vdyxcbiAgICAgIHVwZGF0ZWRBdDogbm93LFxuICAgIH0gYXMgRHluYW1vREJBZHZpc29yeVJldmlldztcblxuICAgIGNvbnN0IHZhbGlkYXRpb24gPSB0aGlzLnZhbGlkYXRlRW50aXR5KGl0ZW0pO1xuICAgIGlmICghdmFsaWRhdGlvbi5pc1ZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEFkdmlzb3J5IHJldmlldyB2YWxpZGF0aW9uIGZhaWxlZDogJHt2YWxpZGF0aW9uLmVycm9ycy5tYXAoKGU6IFZhbGlkYXRpb25FcnJvcikgPT4gZS5tZXNzYWdlKS5qb2luKCcsICcpfWApO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCB0aGlzLmR5bmFtb1NlcnZpY2UucHV0SXRlbShpdGVtKTtcbiAgfVxuXG4gIGFzeW5jIGxpc3RRdWV1ZShvcHRpb25zPzogUXVlcnlPcHRpb25zKTogUHJvbWlzZTxRdWVyeVJlc3VsdDxEeW5hbW9EQkFkdmlzb3J5UmV2aWV3Pj4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnF1ZXJ5KCdBRFZJU09SWSNRVUVVRScsIG9wdGlvbnMpO1xuICB9XG5cbiAgYXN5bmMgbGlzdEJ5VGFyZ2V0KHRhcmdldFR5cGU6IHN0cmluZywgdGFyZ2V0SWQ6IHN0cmluZywgb3B0aW9ucz86IFF1ZXJ5T3B0aW9ucyk6IFByb21pc2U8UXVlcnlSZXN1bHQ8RHluYW1vREJBZHZpc29yeVJldmlldz4+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5xdWVyeUdTSSgnR1NJMScsIGBSRVZJRVdfVEFSR0VUIyR7dGFyZ2V0VHlwZX0jJHt0YXJnZXRJZH1gLCB1bmRlZmluZWQsIG9wdGlvbnMpO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlU3RhdHVzKHJldmlld0lkOiBzdHJpbmcsIHN0YXR1czogRHluYW1vREJBZHZpc29yeVJldmlld1snc3RhdHVzJ10pOiBQcm9taXNlPER5bmFtb0RCQWR2aXNvcnlSZXZpZXc+IHtcbiAgICBjb25zdCB7IFBLLCBTSyB9ID0gS2V5UGF0dGVybnMuQURWSVNPUllfUVVFVUUocmV2aWV3SWQpO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmR5bmFtb1NlcnZpY2UudXBkYXRlSXRlbTxEeW5hbW9EQkFkdmlzb3J5UmV2aWV3PihQSywgU0ssIHtcbiAgICAgIHVwZGF0ZUV4cHJlc3Npb246ICdTRVQgI3N0YXR1cyA9IDpzdGF0dXMsICN1cGRhdGVkQXQgPSA6dXBkYXRlZEF0JyxcbiAgICAgIGV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczogeyAnI3N0YXR1cyc6ICdzdGF0dXMnLCAnI3VwZGF0ZWRBdCc6ICd1cGRhdGVkQXQnIH0sXG4gICAgICBleHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7ICc6c3RhdHVzJzogc3RhdHVzLCAnOnVwZGF0ZWRBdCc6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSB9LFxuICAgICAgcmV0dXJuVmFsdWVzOiAnQUxMX05FVycsXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBhZGREZWNpc2lvbihyZXZpZXdJZDogc3RyaW5nLCBkZWNpc2lvbjogeyByZXZpZXdlcklkOiBzdHJpbmc7IGRlY2lzaW9uOiAnYXBwcm92ZScgfCAncmVxdWVzdF9jaGFuZ2VzJyB8ICdyZWplY3QnOyByYXRpb25hbGU6IHN0cmluZzsgZGVjaWRlZEF0Pzogc3RyaW5nIH0pOiBQcm9taXNlPER5bmFtb0RCQWR2aXNvcnlSZXZpZXc+IHtcbiAgICBjb25zdCB7IFBLLCBTSyB9ID0gS2V5UGF0dGVybnMuQURWSVNPUllfUVVFVUUocmV2aWV3SWQpO1xuICAgIGNvbnN0IGRlY2lkZWRBdCA9IGRlY2lzaW9uLmRlY2lkZWRBdCB8fCBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZHluYW1vU2VydmljZS51cGRhdGVJdGVtPER5bmFtb0RCQWR2aXNvcnlSZXZpZXc+KFBLLCBTSywge1xuICAgICAgdXBkYXRlRXhwcmVzc2lvbjogJ1NFVCAjZGVjaXNpb25zID0gbGlzdF9hcHBlbmQoaWZfbm90X2V4aXN0cygjZGVjaXNpb25zLCA6ZW1wdHkpLCA6ZGVjaXNpb24pLCAjdXBkYXRlZEF0ID0gOnVwZGF0ZWRBdCcsXG4gICAgICBleHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IHsgJyNkZWNpc2lvbnMnOiAnZGVjaXNpb25zJywgJyN1cGRhdGVkQXQnOiAndXBkYXRlZEF0JyB9LFxuICAgICAgZXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczogeyAnOmRlY2lzaW9uJzogW3sgLi4uZGVjaXNpb24sIGRlY2lkZWRBdCB9XSwgJzplbXB0eSc6IFtdLCAnOnVwZGF0ZWRBdCc6IGRlY2lkZWRBdCB9LFxuICAgICAgcmV0dXJuVmFsdWVzOiAnQUxMX05FVycsXG4gICAgfSk7XG4gIH1cbn1cblxuIl19