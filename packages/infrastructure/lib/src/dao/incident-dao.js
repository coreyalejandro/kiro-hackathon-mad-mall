"use strict";
/**
 * Incident DAO Implementation
 * Cultural sensitivity and moderation incident tracking
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncidentDynamoDAO = void 0;
const base_dao_1 = require("./base-dao");
const shared_types_1 = require("@madmall/shared-types");
const shared_types_2 = require("@madmall/shared-types");
class IncidentDynamoDAO extends base_dao_1.BaseDynamoDAO {
    constructor(dynamoService) {
        super(dynamoService, 'INCIDENT');
    }
    validateEntitySpecific(entity) {
        return shared_types_2.DataValidator.validateIncident(entity);
    }
    async createIncident(input) {
        const now = new Date().toISOString();
        const keys = shared_types_1.KeyPatterns.INCIDENT_METADATA(input.incidentId);
        const item = {
            ...input,
            ...keys,
            entityType: 'INCIDENT',
            version: 1,
            createdAt: now,
            updatedAt: now,
        };
        const validation = this.validateEntity(item);
        if (!validation.isValid) {
            throw new Error(`Incident validation failed: ${validation.errors.map((e) => e.message).join(', ')}`);
        }
        return await this.dynamoService.putItem(item);
    }
    async getByStatus(status, options) {
        return await this.queryGSI('GSI3', `INCIDENT_STATUS#${status}`, undefined, options);
    }
    async updateStatus(incidentId, status) {
        const { PK, SK } = shared_types_1.KeyPatterns.INCIDENT_METADATA(incidentId);
        return await this.dynamoService.updateItem(PK, SK, {
            updateExpression: 'SET #status = :status, #updatedAt = :updatedAt',
            expressionAttributeNames: { '#status': 'status', '#updatedAt': 'updatedAt' },
            expressionAttributeValues: { ':status': status, ':updatedAt': new Date().toISOString() },
            returnValues: 'ALL_NEW',
        });
    }
}
exports.IncidentDynamoDAO = IncidentDynamoDAO;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5jaWRlbnQtZGFvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Rhby9pbmNpZGVudC1kYW8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgseUNBQTJDO0FBRTNDLHdEQUFzRTtBQUN0RSx3REFBeUY7QUFHekYsTUFBYSxpQkFBa0IsU0FBUSx3QkFBK0I7SUFDcEUsWUFBWSxhQUE4QjtRQUN4QyxLQUFLLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFUyxzQkFBc0IsQ0FBQyxNQUF3QjtRQUN2RCxPQUFPLDRCQUFhLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBa0Y7UUFDckcsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNyQyxNQUFNLElBQUksR0FBRywwQkFBVyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3RCxNQUFNLElBQUksR0FBcUI7WUFDN0IsR0FBRyxLQUFLO1lBQ1IsR0FBRyxJQUFJO1lBQ1AsVUFBVSxFQUFFLFVBQVU7WUFDdEIsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUsR0FBRztZQUNkLFNBQVMsRUFBRSxHQUFHO1NBQ0ssQ0FBQztRQUV0QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFrQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4SCxDQUFDO1FBRUQsT0FBTyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQWMsRUFBRSxPQUFzQjtRQUN0RCxPQUFPLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsbUJBQW1CLE1BQU0sRUFBRSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN0RixDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVksQ0FBQyxVQUFrQixFQUFFLE1BQWtDO1FBQ3ZFLE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsMEJBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3RCxPQUFPLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQW1CLEVBQUUsRUFBRSxFQUFFLEVBQUU7WUFDbkUsZ0JBQWdCLEVBQUUsZ0RBQWdEO1lBQ2xFLHdCQUF3QixFQUFFLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFO1lBQzVFLHlCQUF5QixFQUFFLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN4RixZQUFZLEVBQUUsU0FBUztTQUN4QixDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0Y7QUExQ0QsOENBMENDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJbmNpZGVudCBEQU8gSW1wbGVtZW50YXRpb25cbiAqIEN1bHR1cmFsIHNlbnNpdGl2aXR5IGFuZCBtb2RlcmF0aW9uIGluY2lkZW50IHRyYWNraW5nXG4gKi9cblxuaW1wb3J0IHsgQmFzZUR5bmFtb0RBTyB9IGZyb20gJy4vYmFzZS1kYW8nO1xuaW1wb3J0IHsgUXVlcnlPcHRpb25zLCBRdWVyeVJlc3VsdCB9IGZyb20gJ0BtYWRtYWxsL3NoYXJlZC10eXBlcyc7XG5pbXBvcnQgeyBEeW5hbW9EQkluY2lkZW50LCBLZXlQYXR0ZXJucyB9IGZyb20gJ0BtYWRtYWxsL3NoYXJlZC10eXBlcyc7XG5pbXBvcnQgeyBEYXRhVmFsaWRhdG9yLCBWYWxpZGF0aW9uUmVzdWx0LCBWYWxpZGF0aW9uRXJyb3IgfSBmcm9tICdAbWFkbWFsbC9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHsgRHluYW1vREJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZHluYW1vZGItc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBJbmNpZGVudER5bmFtb0RBTyBleHRlbmRzIEJhc2VEeW5hbW9EQU88RHluYW1vREJJbmNpZGVudD4ge1xuICBjb25zdHJ1Y3RvcihkeW5hbW9TZXJ2aWNlOiBEeW5hbW9EQlNlcnZpY2UpIHtcbiAgICBzdXBlcihkeW5hbW9TZXJ2aWNlLCAnSU5DSURFTlQnKTtcbiAgfVxuXG4gIHByb3RlY3RlZCB2YWxpZGF0ZUVudGl0eVNwZWNpZmljKGVudGl0eTogRHluYW1vREJJbmNpZGVudCk6IFZhbGlkYXRpb25SZXN1bHQge1xuICAgIHJldHVybiBEYXRhVmFsaWRhdG9yLnZhbGlkYXRlSW5jaWRlbnQoZW50aXR5KTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZUluY2lkZW50KGlucHV0OiBPbWl0PER5bmFtb0RCSW5jaWRlbnQsICdjcmVhdGVkQXQnIHwgJ3VwZGF0ZWRBdCcgfCAndmVyc2lvbicgfCAnUEsnIHwgJ1NLJz4pOiBQcm9taXNlPER5bmFtb0RCSW5jaWRlbnQ+IHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgY29uc3Qga2V5cyA9IEtleVBhdHRlcm5zLklOQ0lERU5UX01FVEFEQVRBKGlucHV0LmluY2lkZW50SWQpO1xuICAgIGNvbnN0IGl0ZW06IER5bmFtb0RCSW5jaWRlbnQgPSB7XG4gICAgICAuLi5pbnB1dCxcbiAgICAgIC4uLmtleXMsXG4gICAgICBlbnRpdHlUeXBlOiAnSU5DSURFTlQnLFxuICAgICAgdmVyc2lvbjogMSxcbiAgICAgIGNyZWF0ZWRBdDogbm93LFxuICAgICAgdXBkYXRlZEF0OiBub3csXG4gICAgfSBhcyBEeW5hbW9EQkluY2lkZW50O1xuXG4gICAgY29uc3QgdmFsaWRhdGlvbiA9IHRoaXMudmFsaWRhdGVFbnRpdHkoaXRlbSk7XG4gICAgaWYgKCF2YWxpZGF0aW9uLmlzVmFsaWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW5jaWRlbnQgdmFsaWRhdGlvbiBmYWlsZWQ6ICR7dmFsaWRhdGlvbi5lcnJvcnMubWFwKChlOiBWYWxpZGF0aW9uRXJyb3IpID0+IGUubWVzc2FnZSkuam9pbignLCAnKX1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXdhaXQgdGhpcy5keW5hbW9TZXJ2aWNlLnB1dEl0ZW0oaXRlbSk7XG4gIH1cblxuICBhc3luYyBnZXRCeVN0YXR1cyhzdGF0dXM6IHN0cmluZywgb3B0aW9ucz86IFF1ZXJ5T3B0aW9ucyk6IFByb21pc2U8UXVlcnlSZXN1bHQ8RHluYW1vREJJbmNpZGVudD4+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5xdWVyeUdTSSgnR1NJMycsIGBJTkNJREVOVF9TVEFUVVMjJHtzdGF0dXN9YCwgdW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIHVwZGF0ZVN0YXR1cyhpbmNpZGVudElkOiBzdHJpbmcsIHN0YXR1czogRHluYW1vREJJbmNpZGVudFsnc3RhdHVzJ10pOiBQcm9taXNlPER5bmFtb0RCSW5jaWRlbnQ+IHtcbiAgICBjb25zdCB7IFBLLCBTSyB9ID0gS2V5UGF0dGVybnMuSU5DSURFTlRfTUVUQURBVEEoaW5jaWRlbnRJZCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZHluYW1vU2VydmljZS51cGRhdGVJdGVtPER5bmFtb0RCSW5jaWRlbnQ+KFBLLCBTSywge1xuICAgICAgdXBkYXRlRXhwcmVzc2lvbjogJ1NFVCAjc3RhdHVzID0gOnN0YXR1cywgI3VwZGF0ZWRBdCA9IDp1cGRhdGVkQXQnLFxuICAgICAgZXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiB7ICcjc3RhdHVzJzogJ3N0YXR1cycsICcjdXBkYXRlZEF0JzogJ3VwZGF0ZWRBdCcgfSxcbiAgICAgIGV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM6IHsgJzpzdGF0dXMnOiBzdGF0dXMsICc6dXBkYXRlZEF0JzogbmV3IERhdGUoKS50b0lTT1N0cmluZygpIH0sXG4gICAgICByZXR1cm5WYWx1ZXM6ICdBTExfTkVXJyxcbiAgICB9KTtcbiAgfVxufVxuXG4iXX0=