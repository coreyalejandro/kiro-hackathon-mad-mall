"use strict";
/**
 * Personalization Profile DAO Implementation
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersonalizationDynamoDAO = void 0;
const base_dao_1 = require("./base-dao");
const shared_types_1 = require("@madmall/shared-types");
const shared_types_2 = require("@madmall/shared-types");
class PersonalizationDynamoDAO extends base_dao_1.BaseDynamoDAO {
    constructor(dynamoService) {
        super(dynamoService, 'PERSONALIZATION');
    }
    validateEntitySpecific(entity) {
        return shared_types_2.DataValidator.validatePersonalization(entity);
    }
    async getForUser(userId) {
        const { PK, SK } = shared_types_1.KeyPatterns.PERSONALIZATION_PROFILE(userId);
        return await super.getById(PK, SK);
    }
    async upsertForUser(userId, updates) {
        const { PK, SK } = shared_types_1.KeyPatterns.PERSONALIZATION_PROFILE(userId);
        // Use update with upsert semantics
        return await this.dynamoService.updateItem(PK, SK, {
            updateExpression: 'SET #entityType = if_not_exists(#entityType, :entityType), #version = if_not_exists(#version, :version), #createdAt = if_not_exists(#createdAt, :createdAt), #updatedAt = :updatedAt' +
                `${updates.preferences ? ', #preferences = :preferences' : ''}` +
                `${updates.engagement ? ', #engagement = :engagement' : ''}` +
                `${updates.abTests ? ', #abTests = :abTests' : ''}` +
                `${updates.cohorts ? ', #cohorts = :cohorts' : ''}` +
                ', #userId = :userId',
            expressionAttributeNames: {
                '#entityType': 'entityType',
                '#version': 'version',
                '#createdAt': 'createdAt',
                '#updatedAt': 'updatedAt',
                '#userId': 'userId',
                ...(updates.preferences ? { '#preferences': 'preferences' } : {}),
                ...(updates.engagement ? { '#engagement': 'engagement' } : {}),
                ...(updates.abTests ? { '#abTests': 'abTests' } : {}),
                ...(updates.cohorts ? { '#cohorts': 'cohorts' } : {}),
            },
            expressionAttributeValues: {
                ':entityType': 'PERSONALIZATION',
                ':version': 1,
                ':createdAt': new Date().toISOString(),
                ':updatedAt': new Date().toISOString(),
                ':userId': userId,
                ...(updates.preferences ? { ':preferences': updates.preferences } : {}),
                ...(updates.engagement ? { ':engagement': updates.engagement } : {}),
                ...(updates.abTests ? { ':abTests': updates.abTests } : {}),
                ...(updates.cohorts ? { ':cohorts': updates.cohorts } : {}),
            },
            returnValues: 'ALL_NEW',
        });
    }
    async listByCohort(cohortId, options) {
        return await this.queryGSI('GSI1', `COHORT#${cohortId}`, undefined, options);
    }
}
exports.PersonalizationDynamoDAO = PersonalizationDynamoDAO;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyc29uYWxpemF0aW9uLWRhby5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kYW8vcGVyc29uYWxpemF0aW9uLWRhby50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7OztBQUVILHlDQUEyQztBQUUzQyx3REFBb0Y7QUFDcEYsd0RBQXdFO0FBR3hFLE1BQWEsd0JBQXlCLFNBQVEsd0JBQTZDO0lBQ3pGLFlBQVksYUFBOEI7UUFDeEMsS0FBSyxDQUFDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFUyxzQkFBc0IsQ0FBQyxNQUFzQztRQUNyRSxPQUFPLDRCQUFhLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBYztRQUM3QixNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLDBCQUFXLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0QsT0FBTyxNQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxLQUFLLENBQUMsYUFBYSxDQUFDLE1BQWMsRUFBRSxPQUFnRDtRQUNsRixNQUFNLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLDBCQUFXLENBQUMsdUJBQXVCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0QsbUNBQW1DO1FBQ25DLE9BQU8sTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBaUMsRUFBRSxFQUFFLEVBQUUsRUFBRTtZQUNqRixnQkFBZ0IsRUFBRSxzTEFBc0w7Z0JBQ3RNLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsK0JBQStCLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDL0QsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUM1RCxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ25ELEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDbkQscUJBQXFCO1lBQ3ZCLHdCQUF3QixFQUFFO2dCQUN4QixhQUFhLEVBQUUsWUFBWTtnQkFDM0IsVUFBVSxFQUFFLFNBQVM7Z0JBQ3JCLFlBQVksRUFBRSxXQUFXO2dCQUN6QixZQUFZLEVBQUUsV0FBVztnQkFDekIsU0FBUyxFQUFFLFFBQVE7Z0JBQ25CLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUNqRSxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDOUQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ3JELEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2FBQ3REO1lBQ0QseUJBQXlCLEVBQUU7Z0JBQ3pCLGFBQWEsRUFBRSxpQkFBaUI7Z0JBQ2hDLFVBQVUsRUFBRSxDQUFDO2dCQUNiLFlBQVksRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRTtnQkFDdEMsWUFBWSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO2dCQUN0QyxTQUFTLEVBQUUsTUFBTTtnQkFDakIsR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsY0FBYyxFQUFFLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUN2RSxHQUFHLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ3BFLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDM0QsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2FBQzVEO1lBQ0QsWUFBWSxFQUFFLFNBQVM7U0FDeEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxZQUFZLENBQUMsUUFBZ0IsRUFBRSxPQUFzQjtRQUN6RCxPQUFPLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsVUFBVSxRQUFRLEVBQUUsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0UsQ0FBQztDQUNGO0FBckRELDREQXFEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUGVyc29uYWxpemF0aW9uIFByb2ZpbGUgREFPIEltcGxlbWVudGF0aW9uXG4gKi9cblxuaW1wb3J0IHsgQmFzZUR5bmFtb0RBTyB9IGZyb20gJy4vYmFzZS1kYW8nO1xuaW1wb3J0IHsgUXVlcnlPcHRpb25zLCBRdWVyeVJlc3VsdCB9IGZyb20gJ0BtYWRtYWxsL3NoYXJlZC10eXBlcyc7XG5pbXBvcnQgeyBEeW5hbW9EQlBlcnNvbmFsaXphdGlvblByb2ZpbGUsIEtleVBhdHRlcm5zIH0gZnJvbSAnQG1hZG1hbGwvc2hhcmVkLXR5cGVzJztcbmltcG9ydCB7IERhdGFWYWxpZGF0b3IsIFZhbGlkYXRpb25SZXN1bHQgfSBmcm9tICdAbWFkbWFsbC9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHsgRHluYW1vREJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZHluYW1vZGItc2VydmljZSc7XG5cbmV4cG9ydCBjbGFzcyBQZXJzb25hbGl6YXRpb25EeW5hbW9EQU8gZXh0ZW5kcyBCYXNlRHluYW1vREFPPER5bmFtb0RCUGVyc29uYWxpemF0aW9uUHJvZmlsZT4ge1xuICBjb25zdHJ1Y3RvcihkeW5hbW9TZXJ2aWNlOiBEeW5hbW9EQlNlcnZpY2UpIHtcbiAgICBzdXBlcihkeW5hbW9TZXJ2aWNlLCAnUEVSU09OQUxJWkFUSU9OJyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdmFsaWRhdGVFbnRpdHlTcGVjaWZpYyhlbnRpdHk6IER5bmFtb0RCUGVyc29uYWxpemF0aW9uUHJvZmlsZSk6IFZhbGlkYXRpb25SZXN1bHQge1xuICAgIHJldHVybiBEYXRhVmFsaWRhdG9yLnZhbGlkYXRlUGVyc29uYWxpemF0aW9uKGVudGl0eSk7XG4gIH1cblxuICBhc3luYyBnZXRGb3JVc2VyKHVzZXJJZDogc3RyaW5nKTogUHJvbWlzZTxEeW5hbW9EQlBlcnNvbmFsaXphdGlvblByb2ZpbGUgfCBudWxsPiB7XG4gICAgY29uc3QgeyBQSywgU0sgfSA9IEtleVBhdHRlcm5zLlBFUlNPTkFMSVpBVElPTl9QUk9GSUxFKHVzZXJJZCk7XG4gICAgcmV0dXJuIGF3YWl0IHN1cGVyLmdldEJ5SWQoUEssIFNLKTtcbiAgfVxuXG4gIGFzeW5jIHVwc2VydEZvclVzZXIodXNlcklkOiBzdHJpbmcsIHVwZGF0ZXM6IFBhcnRpYWw8RHluYW1vREJQZXJzb25hbGl6YXRpb25Qcm9maWxlPik6IFByb21pc2U8RHluYW1vREJQZXJzb25hbGl6YXRpb25Qcm9maWxlPiB7XG4gICAgY29uc3QgeyBQSywgU0sgfSA9IEtleVBhdHRlcm5zLlBFUlNPTkFMSVpBVElPTl9QUk9GSUxFKHVzZXJJZCk7XG4gICAgLy8gVXNlIHVwZGF0ZSB3aXRoIHVwc2VydCBzZW1hbnRpY3NcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5keW5hbW9TZXJ2aWNlLnVwZGF0ZUl0ZW08RHluYW1vREJQZXJzb25hbGl6YXRpb25Qcm9maWxlPihQSywgU0ssIHtcbiAgICAgIHVwZGF0ZUV4cHJlc3Npb246ICdTRVQgI2VudGl0eVR5cGUgPSBpZl9ub3RfZXhpc3RzKCNlbnRpdHlUeXBlLCA6ZW50aXR5VHlwZSksICN2ZXJzaW9uID0gaWZfbm90X2V4aXN0cygjdmVyc2lvbiwgOnZlcnNpb24pLCAjY3JlYXRlZEF0ID0gaWZfbm90X2V4aXN0cygjY3JlYXRlZEF0LCA6Y3JlYXRlZEF0KSwgI3VwZGF0ZWRBdCA9IDp1cGRhdGVkQXQnICtcbiAgICAgICAgYCR7dXBkYXRlcy5wcmVmZXJlbmNlcyA/ICcsICNwcmVmZXJlbmNlcyA9IDpwcmVmZXJlbmNlcycgOiAnJ31gICtcbiAgICAgICAgYCR7dXBkYXRlcy5lbmdhZ2VtZW50ID8gJywgI2VuZ2FnZW1lbnQgPSA6ZW5nYWdlbWVudCcgOiAnJ31gICtcbiAgICAgICAgYCR7dXBkYXRlcy5hYlRlc3RzID8gJywgI2FiVGVzdHMgPSA6YWJUZXN0cycgOiAnJ31gICtcbiAgICAgICAgYCR7dXBkYXRlcy5jb2hvcnRzID8gJywgI2NvaG9ydHMgPSA6Y29ob3J0cycgOiAnJ31gICtcbiAgICAgICAgJywgI3VzZXJJZCA9IDp1c2VySWQnLFxuICAgICAgZXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgICAgICcjZW50aXR5VHlwZSc6ICdlbnRpdHlUeXBlJyxcbiAgICAgICAgJyN2ZXJzaW9uJzogJ3ZlcnNpb24nLFxuICAgICAgICAnI2NyZWF0ZWRBdCc6ICdjcmVhdGVkQXQnLFxuICAgICAgICAnI3VwZGF0ZWRBdCc6ICd1cGRhdGVkQXQnLFxuICAgICAgICAnI3VzZXJJZCc6ICd1c2VySWQnLFxuICAgICAgICAuLi4odXBkYXRlcy5wcmVmZXJlbmNlcyA/IHsgJyNwcmVmZXJlbmNlcyc6ICdwcmVmZXJlbmNlcycgfSA6IHt9KSxcbiAgICAgICAgLi4uKHVwZGF0ZXMuZW5nYWdlbWVudCA/IHsgJyNlbmdhZ2VtZW50JzogJ2VuZ2FnZW1lbnQnIH0gOiB7fSksXG4gICAgICAgIC4uLih1cGRhdGVzLmFiVGVzdHMgPyB7ICcjYWJUZXN0cyc6ICdhYlRlc3RzJyB9IDoge30pLFxuICAgICAgICAuLi4odXBkYXRlcy5jb2hvcnRzID8geyAnI2NvaG9ydHMnOiAnY29ob3J0cycgfSA6IHt9KSxcbiAgICAgIH0sXG4gICAgICBleHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICAgICc6ZW50aXR5VHlwZSc6ICdQRVJTT05BTElaQVRJT04nLFxuICAgICAgICAnOnZlcnNpb24nOiAxLFxuICAgICAgICAnOmNyZWF0ZWRBdCc6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgJzp1cGRhdGVkQXQnOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICc6dXNlcklkJzogdXNlcklkLFxuICAgICAgICAuLi4odXBkYXRlcy5wcmVmZXJlbmNlcyA/IHsgJzpwcmVmZXJlbmNlcyc6IHVwZGF0ZXMucHJlZmVyZW5jZXMgfSA6IHt9KSxcbiAgICAgICAgLi4uKHVwZGF0ZXMuZW5nYWdlbWVudCA/IHsgJzplbmdhZ2VtZW50JzogdXBkYXRlcy5lbmdhZ2VtZW50IH0gOiB7fSksXG4gICAgICAgIC4uLih1cGRhdGVzLmFiVGVzdHMgPyB7ICc6YWJUZXN0cyc6IHVwZGF0ZXMuYWJUZXN0cyB9IDoge30pLFxuICAgICAgICAuLi4odXBkYXRlcy5jb2hvcnRzID8geyAnOmNvaG9ydHMnOiB1cGRhdGVzLmNvaG9ydHMgfSA6IHt9KSxcbiAgICAgIH0sXG4gICAgICByZXR1cm5WYWx1ZXM6ICdBTExfTkVXJyxcbiAgICB9KTtcbiAgfVxuXG4gIGFzeW5jIGxpc3RCeUNvaG9ydChjb2hvcnRJZDogc3RyaW5nLCBvcHRpb25zPzogUXVlcnlPcHRpb25zKTogUHJvbWlzZTxRdWVyeVJlc3VsdDxEeW5hbW9EQlBlcnNvbmFsaXphdGlvblByb2ZpbGU+PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucXVlcnlHU0koJ0dTSTEnLCBgQ09IT1JUIyR7Y29ob3J0SWR9YCwgdW5kZWZpbmVkLCBvcHRpb25zKTtcbiAgfVxufVxuXG4iXX0=