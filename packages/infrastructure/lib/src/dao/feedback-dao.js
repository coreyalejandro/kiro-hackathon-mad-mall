"use strict";
/**
 * Feedback DAO Implementation
 * Community feedback and reports for images
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedbackDynamoDAO = void 0;
const base_dao_1 = require("./base-dao");
const shared_types_1 = require("@madmall/shared-types");
const shared_types_2 = require("@madmall/shared-types");
class FeedbackDynamoDAO extends base_dao_1.BaseDynamoDAO {
    constructor(dynamoService) {
        super(dynamoService, 'FEEDBACK');
    }
    validateEntitySpecific(entity) {
        return shared_types_2.DataValidator.validateFeedback(entity);
    }
    async createForImage(input) {
        const now = new Date().toISOString();
        const keys = shared_types_1.KeyPatterns.FEEDBACK_FOR_IMAGE(input.imageId, input.userId, now);
        const item = {
            ...input,
            ...keys,
            entityType: 'FEEDBACK',
            version: 1,
            createdAt: now,
            updatedAt: now,
        };
        const validation = this.validateEntity(item);
        if (!validation.isValid) {
            throw new Error(`Feedback validation failed: ${validation.errors.map((e) => e.message).join(', ')}`);
        }
        return await this.dynamoService.putItem(item);
    }
    async listForImage(imageId, options) {
        return await this.query(`FEEDBACK#IMAGE#${imageId}`, options);
    }
    async listBySeverity(severity, options) {
        return await this.queryGSI('GSI3', `FEEDBACK_SEVERITY#${severity}`, undefined, options);
    }
    async updateStatus(pk, sk, status) {
        return await this.update(pk, sk, { status });
    }
}
exports.FeedbackDynamoDAO = FeedbackDynamoDAO;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVlZGJhY2stZGFvLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2Rhby9mZWVkYmFjay1kYW8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOzs7R0FHRzs7O0FBRUgseUNBQTJDO0FBRTNDLHdEQUFzRTtBQUN0RSx3REFBeUY7QUFHekYsTUFBYSxpQkFBa0IsU0FBUSx3QkFBK0I7SUFDcEUsWUFBWSxhQUE4QjtRQUN4QyxLQUFLLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFFUyxzQkFBc0IsQ0FBQyxNQUF3QjtRQUN2RCxPQUFPLDRCQUFhLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBd0c7UUFDM0gsTUFBTSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNyQyxNQUFNLElBQUksR0FBRywwQkFBVyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUM5RSxNQUFNLElBQUksR0FBcUI7WUFDN0IsR0FBRyxLQUFLO1lBQ1IsR0FBRyxJQUFJO1lBQ1AsVUFBVSxFQUFFLFVBQVU7WUFDdEIsT0FBTyxFQUFFLENBQUM7WUFDVixTQUFTLEVBQUUsR0FBRztZQUNkLFNBQVMsRUFBRSxHQUFHO1NBQ0ssQ0FBQztRQUV0QixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFrQixFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4SCxDQUFDO1FBRUQsT0FBTyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQWUsRUFBRSxPQUFzQjtRQUN4RCxPQUFPLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsT0FBTyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVELEtBQUssQ0FBQyxjQUFjLENBQUMsUUFBZ0IsRUFBRSxPQUFzQjtRQUMzRCxPQUFPLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUscUJBQXFCLFFBQVEsRUFBRSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxRixDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFVLEVBQUUsRUFBVSxFQUFFLE1BQWtDO1FBQzNFLE9BQU8sTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQVMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Q0FDRjtBQXhDRCw4Q0F3Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZlZWRiYWNrIERBTyBJbXBsZW1lbnRhdGlvblxuICogQ29tbXVuaXR5IGZlZWRiYWNrIGFuZCByZXBvcnRzIGZvciBpbWFnZXNcbiAqL1xuXG5pbXBvcnQgeyBCYXNlRHluYW1vREFPIH0gZnJvbSAnLi9iYXNlLWRhbyc7XG5pbXBvcnQgeyBRdWVyeU9wdGlvbnMsIFF1ZXJ5UmVzdWx0IH0gZnJvbSAnQG1hZG1hbGwvc2hhcmVkLXR5cGVzJztcbmltcG9ydCB7IER5bmFtb0RCRmVlZGJhY2ssIEtleVBhdHRlcm5zIH0gZnJvbSAnQG1hZG1hbGwvc2hhcmVkLXR5cGVzJztcbmltcG9ydCB7IERhdGFWYWxpZGF0b3IsIFZhbGlkYXRpb25SZXN1bHQsIFZhbGlkYXRpb25FcnJvciB9IGZyb20gJ0BtYWRtYWxsL3NoYXJlZC10eXBlcyc7XG5pbXBvcnQgeyBEeW5hbW9EQlNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9keW5hbW9kYi1zZXJ2aWNlJztcblxuZXhwb3J0IGNsYXNzIEZlZWRiYWNrRHluYW1vREFPIGV4dGVuZHMgQmFzZUR5bmFtb0RBTzxEeW5hbW9EQkZlZWRiYWNrPiB7XG4gIGNvbnN0cnVjdG9yKGR5bmFtb1NlcnZpY2U6IER5bmFtb0RCU2VydmljZSkge1xuICAgIHN1cGVyKGR5bmFtb1NlcnZpY2UsICdGRUVEQkFDSycpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHZhbGlkYXRlRW50aXR5U3BlY2lmaWMoZW50aXR5OiBEeW5hbW9EQkZlZWRiYWNrKTogVmFsaWRhdGlvblJlc3VsdCB7XG4gICAgcmV0dXJuIERhdGFWYWxpZGF0b3IudmFsaWRhdGVGZWVkYmFjayhlbnRpdHkpO1xuICB9XG5cbiAgYXN5bmMgY3JlYXRlRm9ySW1hZ2UoaW5wdXQ6IE9taXQ8RHluYW1vREJGZWVkYmFjaywgJ2NyZWF0ZWRBdCcgfCAndXBkYXRlZEF0JyB8ICd2ZXJzaW9uJyB8ICdQSycgfCAnU0snIHwgJ0dTSTFQSycgfCAnR1NJMVNLJz4pOiBQcm9taXNlPER5bmFtb0RCRmVlZGJhY2s+IHtcbiAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgY29uc3Qga2V5cyA9IEtleVBhdHRlcm5zLkZFRURCQUNLX0ZPUl9JTUFHRShpbnB1dC5pbWFnZUlkLCBpbnB1dC51c2VySWQsIG5vdyk7XG4gICAgY29uc3QgaXRlbTogRHluYW1vREJGZWVkYmFjayA9IHtcbiAgICAgIC4uLmlucHV0LFxuICAgICAgLi4ua2V5cyxcbiAgICAgIGVudGl0eVR5cGU6ICdGRUVEQkFDSycsXG4gICAgICB2ZXJzaW9uOiAxLFxuICAgICAgY3JlYXRlZEF0OiBub3csXG4gICAgICB1cGRhdGVkQXQ6IG5vdyxcbiAgICB9IGFzIER5bmFtb0RCRmVlZGJhY2s7XG5cbiAgICBjb25zdCB2YWxpZGF0aW9uID0gdGhpcy52YWxpZGF0ZUVudGl0eShpdGVtKTtcbiAgICBpZiAoIXZhbGlkYXRpb24uaXNWYWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBGZWVkYmFjayB2YWxpZGF0aW9uIGZhaWxlZDogJHt2YWxpZGF0aW9uLmVycm9ycy5tYXAoKGU6IFZhbGlkYXRpb25FcnJvcikgPT4gZS5tZXNzYWdlKS5qb2luKCcsICcpfWApO1xuICAgIH1cblxuICAgIHJldHVybiBhd2FpdCB0aGlzLmR5bmFtb1NlcnZpY2UucHV0SXRlbShpdGVtKTtcbiAgfVxuXG4gIGFzeW5jIGxpc3RGb3JJbWFnZShpbWFnZUlkOiBzdHJpbmcsIG9wdGlvbnM/OiBRdWVyeU9wdGlvbnMpOiBQcm9taXNlPFF1ZXJ5UmVzdWx0PER5bmFtb0RCRmVlZGJhY2s+PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucXVlcnkoYEZFRURCQUNLI0lNQUdFIyR7aW1hZ2VJZH1gLCBvcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jIGxpc3RCeVNldmVyaXR5KHNldmVyaXR5OiBzdHJpbmcsIG9wdGlvbnM/OiBRdWVyeU9wdGlvbnMpOiBQcm9taXNlPFF1ZXJ5UmVzdWx0PER5bmFtb0RCRmVlZGJhY2s+PiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucXVlcnlHU0koJ0dTSTMnLCBgRkVFREJBQ0tfU0VWRVJJVFkjJHtzZXZlcml0eX1gLCB1bmRlZmluZWQsIG9wdGlvbnMpO1xuICB9XG5cbiAgYXN5bmMgdXBkYXRlU3RhdHVzKHBrOiBzdHJpbmcsIHNrOiBzdHJpbmcsIHN0YXR1czogRHluYW1vREJGZWVkYmFja1snc3RhdHVzJ10pOiBQcm9taXNlPER5bmFtb0RCRmVlZGJhY2s+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy51cGRhdGUocGssIHNrLCB7IHN0YXR1cyB9IGFzIGFueSk7XG4gIH1cbn1cblxuIl19