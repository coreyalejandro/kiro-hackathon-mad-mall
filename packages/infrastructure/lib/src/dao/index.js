"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SQLiteDataSource = exports.MigrationService = exports.DynamoDBService = exports.PersonalizationDynamoDAO = exports.PremiumSourceDynamoDAO = exports.AdvisoryReviewDynamoDAO = exports.IncidentDynamoDAO = exports.FeedbackDynamoDAO = exports.ImageAssetDynamoDAO = exports.CircleDynamoDAO = exports.UserDynamoDAO = exports.BaseDynamoDAO = exports.DynamoDAOFactory = void 0;
exports.createDAOFactory = createDAOFactory;
exports.createCustomDAOFactory = createCustomDAOFactory;
const dynamodb_service_1 = require("../services/dynamodb-service");
const user_dao_1 = require("./user-dao");
const circle_dao_1 = require("./circle-dao");
// New DAOs
// These files will be implemented: image-asset-dao, feedback-dao, incident-dao, advisory-review-dao, premium-source-dao, personalization-dao
// Import stubs to wire factory after implementation
// eslint-disable-next-line import/no-unresolved
const image_asset_dao_1 = require("./image-asset-dao");
// eslint-disable-next-line import/no-unresolved
const feedback_dao_1 = require("./feedback-dao");
// eslint-disable-next-line import/no-unresolved
const incident_dao_1 = require("./incident-dao");
// eslint-disable-next-line import/no-unresolved
const advisory_review_dao_1 = require("./advisory-review-dao");
// eslint-disable-next-line import/no-unresolved
const premium_source_dao_1 = require("./premium-source-dao");
// eslint-disable-next-line import/no-unresolved
const personalization_dao_1 = require("./personalization-dao");
class DynamoDAOFactory {
    // Add other DAOs as they are implemented
    // public readonly storyDAO: StoryDynamoDAO;
    // public readonly businessDAO: BusinessDynamoDAO;
    // public readonly resourceDAO: ResourceDynamoDAO;
    constructor(config) {
        this.dynamoService = new dynamodb_service_1.DynamoDBService(config);
        // Initialize all DAOs
        this.userDAO = new user_dao_1.UserDynamoDAO(this.dynamoService);
        this.circleDAO = new circle_dao_1.CircleDynamoDAO(this.dynamoService);
        this.imageAssetDAO = new image_asset_dao_1.ImageAssetDynamoDAO(this.dynamoService);
        this.feedbackDAO = new feedback_dao_1.FeedbackDynamoDAO(this.dynamoService);
        this.incidentDAO = new incident_dao_1.IncidentDynamoDAO(this.dynamoService);
        this.advisoryReviewDAO = new advisory_review_dao_1.AdvisoryReviewDynamoDAO(this.dynamoService);
        this.premiumSourceDAO = new premium_source_dao_1.PremiumSourceDynamoDAO(this.dynamoService);
        this.personalizationDAO = new personalization_dao_1.PersonalizationDynamoDAO(this.dynamoService);
        // Initialize other DAOs as they are implemented
        // this.storyDAO = new StoryDynamoDAO(this.dynamoService);
        // this.businessDAO = new BusinessDynamoDAO(this.dynamoService);
        // this.resourceDAO = new ResourceDynamoDAO(this.dynamoService);
    }
    /**
     * Get the underlying DynamoDB service
     */
    getDynamoService() {
        return this.dynamoService;
    }
    /**
     * Get connection metrics from the DynamoDB service
     */
    getMetrics() {
        return this.dynamoService.getMetrics();
    }
    /**
     * Perform health check on the DynamoDB connection
     */
    async healthCheck() {
        return await this.dynamoService.healthCheck();
    }
    /**
     * Close all connections and cleanup resources
     */
    async close() {
        await this.dynamoService.close();
    }
}
exports.DynamoDAOFactory = DynamoDAOFactory;
// Export individual DAOs and base classes
var base_dao_1 = require("./base-dao");
Object.defineProperty(exports, "BaseDynamoDAO", { enumerable: true, get: function () { return base_dao_1.BaseDynamoDAO; } });
var user_dao_2 = require("./user-dao");
Object.defineProperty(exports, "UserDynamoDAO", { enumerable: true, get: function () { return user_dao_2.UserDynamoDAO; } });
var circle_dao_2 = require("./circle-dao");
Object.defineProperty(exports, "CircleDynamoDAO", { enumerable: true, get: function () { return circle_dao_2.CircleDynamoDAO; } });
var image_asset_dao_2 = require("./image-asset-dao");
Object.defineProperty(exports, "ImageAssetDynamoDAO", { enumerable: true, get: function () { return image_asset_dao_2.ImageAssetDynamoDAO; } });
var feedback_dao_2 = require("./feedback-dao");
Object.defineProperty(exports, "FeedbackDynamoDAO", { enumerable: true, get: function () { return feedback_dao_2.FeedbackDynamoDAO; } });
var incident_dao_2 = require("./incident-dao");
Object.defineProperty(exports, "IncidentDynamoDAO", { enumerable: true, get: function () { return incident_dao_2.IncidentDynamoDAO; } });
var advisory_review_dao_2 = require("./advisory-review-dao");
Object.defineProperty(exports, "AdvisoryReviewDynamoDAO", { enumerable: true, get: function () { return advisory_review_dao_2.AdvisoryReviewDynamoDAO; } });
var premium_source_dao_2 = require("./premium-source-dao");
Object.defineProperty(exports, "PremiumSourceDynamoDAO", { enumerable: true, get: function () { return premium_source_dao_2.PremiumSourceDynamoDAO; } });
var personalization_dao_2 = require("./personalization-dao");
Object.defineProperty(exports, "PersonalizationDynamoDAO", { enumerable: true, get: function () { return personalization_dao_2.PersonalizationDynamoDAO; } });
// Export service and types
var dynamodb_service_2 = require("../services/dynamodb-service");
Object.defineProperty(exports, "DynamoDBService", { enumerable: true, get: function () { return dynamodb_service_2.DynamoDBService; } });
// Export migration utilities
var migration_service_1 = require("../migration/migration-service");
Object.defineProperty(exports, "MigrationService", { enumerable: true, get: function () { return migration_service_1.MigrationService; } });
var sqlite_data_source_1 = require("../migration/sqlite-data-source");
Object.defineProperty(exports, "SQLiteDataSource", { enumerable: true, get: function () { return sqlite_data_source_1.SQLiteDataSource; } });
/**
 * Create DAO factory with environment-specific configuration
 */
function createDAOFactory(environment) {
    const config = {
        region: process.env.AWS_REGION || 'us-east-1',
        tableName: `madmall-${environment}-main`,
        maxRetries: environment === 'production' ? 5 : 3,
        timeout: environment === 'production' ? 5000 : 3000,
        connectionPoolSize: environment === 'production' ? 100 : 50,
        enableXRayTracing: environment === 'production',
        enableMetrics: true,
    };
    // Use local DynamoDB for development
    if (environment === 'development') {
        config.endpoint = process.env.DYNAMODB_ENDPOINT || 'http://localhost:8000';
    }
    return new DynamoDAOFactory(config);
}
/**
 * Create DAO factory with custom configuration
 */
function createCustomDAOFactory(config) {
    return new DynamoDAOFactory(config);
}
//# sourceMappingURL=data:application/json;base64,