"use strict";
/**
 * Circle DAO Implementation
 * Data access operations for Circle entities
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CircleDynamoDAO = void 0;
const base_dao_1 = require("./base-dao");
const database_1 = require("@madmall/shared-types/database");
const database_2 = require("@madmall/shared-types/database");
class CircleDynamoDAO extends base_dao_1.BaseDynamoDAO {
    constructor(dynamoService) {
        super(dynamoService, 'CIRCLE');
    }
    /**
     * Entity-specific validation for circles
     */
    validateEntitySpecific(entity) {
        return database_2.DataValidator.validateCircle(entity);
    }
    /**
     * Get circles by type using GSI1
     */
    async getByType(type, options) {
        return await this.queryGSI('GSI1', `CIRCLE_TYPE#${type}`, undefined, options);
    }
    /**
     * Get circle members
     */
    async getMembers(circleId, options) {
        const keyConditionExpression = 'PK = :pk AND begins_with(SK, :skPrefix)';
        const expressionAttributeValues = {
            ':pk': `CIRCLE#${circleId}`,
            ':skPrefix': 'MEMBER#',
        };
        return await this.dynamoService.query(keyConditionExpression, {
            ...options,
            expressionAttributeValues: {
                ...expressionAttributeValues,
                ...options?.expressionAttributeValues,
            },
        });
    }
    /**
     * Add member to circle
     */
    async addMember(circleId, userId, role = 'member') {
        const now = new Date().toISOString();
        const member = {
            PK: `CIRCLE#${circleId}`,
            SK: `MEMBER#${userId}`,
            GSI3PK: `MEMBER_STATUS#active`,
            GSI3SK: `JOINED#${now}`,
            entityType: 'CIRCLE_MEMBER',
            version: 1,
            createdAt: now,
            updatedAt: now,
            circleId,
            userId,
            role,
            status: 'active',
            joinedAt: now,
            lastActive: now,
            contributionScore: 0,
            badges: [],
        };
        // Also create reverse relationship for user's circles
        const userCircleRelation = {
            ...member,
            PK: `USER#${userId}`,
            SK: `CIRCLE#${circleId}`,
        };
        // Use transaction to ensure both records are created
        await this.dynamoService.transaction([
            {
                operation: 'put',
                item: member,
            },
            {
                operation: 'put',
                item: userCircleRelation,
            },
        ]);
        // Update circle member count
        await this.updateStats(circleId, { memberCount: 1 });
        return member;
    }
    /**
     * Remove member from circle
     */
    async removeMember(circleId, userId) {
        // Use transaction to remove both relationships
        await this.dynamoService.transaction([
            {
                operation: 'delete',
                key: { PK: `CIRCLE#${circleId}`, SK: `MEMBER#${userId}` },
            },
            {
                operation: 'delete',
                key: { PK: `USER#${userId}`, SK: `CIRCLE#${circleId}` },
            },
        ]);
        // Update circle member count
        await this.updateStats(circleId, { memberCount: -1 });
    }
    /**
     * Update member role
     */
    async updateMemberRole(circleId, userId, role) {
        const now = new Date().toISOString();
        // Update both relationship records
        await this.dynamoService.transaction([
            {
                operation: 'update',
                key: { PK: `CIRCLE#${circleId}`, SK: `MEMBER#${userId}` },
                updateExpression: 'SET #role = :role, #updatedAt = :updatedAt, #version = #version + :inc',
                expressionAttributeNames: {
                    '#role': 'role',
                    '#updatedAt': 'updatedAt',
                    '#version': 'version',
                },
                expressionAttributeValues: {
                    ':role': role,
                    ':updatedAt': now,
                    ':inc': 1,
                },
            },
            {
                operation: 'update',
                key: { PK: `USER#${userId}`, SK: `CIRCLE#${circleId}` },
                updateExpression: 'SET #role = :role, #updatedAt = :updatedAt, #version = #version + :inc',
                expressionAttributeNames: {
                    '#role': 'role',
                    '#updatedAt': 'updatedAt',
                    '#version': 'version',
                },
                expressionAttributeValues: {
                    ':role': role,
                    ':updatedAt': now,
                    ':inc': 1,
                },
            },
        ]);
    }
    /**
     * Get active circles using GSI3
     */
    async getActiveCircles(options) {
        return await this.queryGSI('GSI3', 'CIRCLE_STATUS#ACTIVE', undefined, options);
    }
    /**
     * Search circles by criteria
     */
    async searchCircles(criteria, options) {
        let baseQuery;
        // Start with type-based query if type is specified
        if (criteria.type) {
            baseQuery = this.getByType(criteria.type, options);
        }
        else {
            // Otherwise get all active circles
            baseQuery = this.getActiveCircles(options);
        }
        const result = await baseQuery;
        // Apply additional filters in memory (for better performance, consider using search service)
        let filteredItems = result.items;
        if (criteria.culturalFocus && criteria.culturalFocus.length > 0) {
            filteredItems = filteredItems.filter(circle => circle.settings.culturalFocus?.some(focus => criteria.culturalFocus.includes(focus)));
        }
        if (criteria.tags && criteria.tags.length > 0) {
            filteredItems = filteredItems.filter(circle => circle.tags.some(tag => criteria.tags.includes(tag)));
        }
        if (criteria.isPrivate !== undefined) {
            filteredItems = filteredItems.filter(circle => circle.settings.isPrivate === criteria.isPrivate);
        }
        return {
            ...result,
            items: filteredItems,
            count: filteredItems.length,
        };
    }
    /**
     * Update circle statistics
     */
    async updateStats(circleId, stats) {
        const { PK, SK } = database_1.KeyPatterns.CIRCLE_METADATA(circleId);
        const updateExpressions = [];
        const expressionAttributeNames = {
            '#updatedAt': 'updatedAt',
            '#version': 'version',
        };
        const expressionAttributeValues = {
            ':updatedAt': new Date().toISOString(),
            ':versionIncrement': 1,
        };
        // Build update expressions for each stat
        Object.entries(stats).forEach(([statName, value]) => {
            if (value !== undefined) {
                const attrName = `#stats_${statName}`;
                const attrValue = `:${statName}`;
                if (typeof value === 'number' && (statName === 'memberCount' || statName === 'postsThisWeek' || statName === 'postsThisMonth')) {
                    // For counts, use ADD operation to increment/decrement
                    updateExpressions.push(`#stats.${attrName} = if_not_exists(#stats.${attrName}, :zero) + ${attrValue}`);
                    expressionAttributeValues[':zero'] = 0;
                }
                else {
                    // For rates and averages, use SET operation
                    updateExpressions.push(`#stats.${attrName} = ${attrValue}`);
                }
                expressionAttributeNames['#stats'] = 'stats';
                expressionAttributeNames[attrName] = statName;
                expressionAttributeValues[attrValue] = value;
            }
        });
        if (updateExpressions.length > 0) {
            updateExpressions.push('#updatedAt = :updatedAt');
            updateExpressions.push('#version = #version + :versionIncrement');
            await this.dynamoService.updateItem(PK, SK, {
                updateExpression: `SET ${updateExpressions.join(', ')}`,
                expressionAttributeNames,
                expressionAttributeValues,
            });
        }
    }
    /**
     * Create circle with proper key generation
     */
    async create(item) {
        const now = new Date().toISOString();
        // Generate keys using patterns
        const { PK, SK } = database_1.KeyPatterns.CIRCLE_METADATA(item.circleId);
        const newCircle = {
            ...item,
            PK,
            SK,
            GSI1PK: `CIRCLE_TYPE#${item.type}`,
            GSI1SK: `CREATED#${now}`,
            GSI3PK: `CIRCLE_STATUS#${item.status || 'ACTIVE'}`,
            GSI3SK: `UPDATED#${now}`,
            GSI4PK: `TENANT#${item.tenantId || 'default'}#CIRCLES`,
            GSI4SK: `CREATED#${now}`,
            entityType: 'CIRCLE',
            version: 1,
            createdAt: now,
            updatedAt: now,
            status: item.status || 'ACTIVE',
        };
        // Validate before creating
        const validation = this.validateEntitySpecific(newCircle);
        if (!validation.isValid) {
            throw new Error(`Circle validation failed: ${validation.errors.map(e => e.message).join(', ')}`);
        }
        const createdCircle = await this.dynamoService.putItem(newCircle);
        // Add creator as first member with admin role
        await this.addMember(item.circleId, item.createdBy, 'admin');
        return createdCircle;
    }
    /**
     * Get circle by ID (convenience method)
     */
    async getCircleById(circleId) {
        const { PK, SK } = database_1.KeyPatterns.CIRCLE_METADATA(circleId);
        return await this.getById(PK, SK);
    }
    /**
     * Update circle settings
     */
    async updateSettings(circleId, settingsUpdates) {
        const { PK, SK } = database_1.KeyPatterns.CIRCLE_METADATA(circleId);
        const updateExpressions = [];
        const expressionAttributeNames = {
            '#updatedAt': 'updatedAt',
            '#version': 'version',
        };
        const expressionAttributeValues = {
            ':updatedAt': new Date().toISOString(),
            ':versionIncrement': 1,
        };
        // Build update expressions for settings fields
        Object.entries(settingsUpdates).forEach(([field, value]) => {
            const attrName = `#settings_${field}`;
            const attrValue = `:settings_${field}`;
            updateExpressions.push(`#settings.${attrName} = ${attrValue}`);
            expressionAttributeNames['#settings'] = 'settings';
            expressionAttributeNames[attrName] = field;
            expressionAttributeValues[attrValue] = value;
        });
        updateExpressions.push('#updatedAt = :updatedAt');
        updateExpressions.push('#version = #version + :versionIncrement');
        return await this.dynamoService.updateItem(PK, SK, {
            updateExpression: `SET ${updateExpressions.join(', ')}`,
            expressionAttributeNames,
            expressionAttributeValues,
            returnValues: 'ALL_NEW',
        });
    }
    /**
     * Get member by circle and user ID
     */
    async getMember(circleId, userId) {
        const { PK, SK } = database_1.KeyPatterns.CIRCLE_MEMBER(circleId, userId);
        return await this.dynamoService.getItem(PK, SK);
    }
    /**
     * Check if user is member of circle
     */
    async isMember(circleId, userId) {
        const member = await this.getMember(circleId, userId);
        return member !== null && member.status === 'active';
    }
    /**
     * Get circles by member status using GSI3
     */
    async getCirclesByMemberStatus(status, options) {
        return await this.queryGSI('GSI3', `MEMBER_STATUS#${status}`, undefined, options);
    }
}
exports.CircleDynamoDAO = CircleDynamoDAO;
//# sourceMappingURL=data:application/json;base64,