"use strict";
// Jest setup file for bedrock-agents package
// Mock AWS SDK clients for testing
jest.mock('@aws-sdk/client-bedrock-runtime', () => ({
    BedrockRuntimeClient: jest.fn().mockImplementation(() => ({
        send: jest.fn(),
    })),
    InvokeModelCommand: jest.fn(),
}));
jest.mock('@aws-sdk/client-bedrock-agent', () => ({
    BedrockAgentClient: jest.fn().mockImplementation(() => ({
        send: jest.fn(),
    })),
}));
// Set up test environment variables
process.env.NODE_ENV = 'test';
process.env.AWS_REGION = 'us-east-1';
process.env.BEDROCK_DEFAULT_MODEL_ID = 'mock-model';
// Global test utilities
global.mockBedrockResponse = (response) => {
    const mockSend = jest.fn().mockResolvedValue({
        body: new TextEncoder().encode(JSON.stringify(response)),
    });
    return mockSend;
};
// Suppress console logs during tests unless explicitly needed
const originalConsoleError = console.error;
const originalConsoleWarn = console.warn;
const originalConsoleLog = console.log;
beforeEach(() => {
    if (!process.env.VERBOSE_TESTS) {
        console.error = jest.fn();
        console.warn = jest.fn();
        console.log = jest.fn();
    }
});
afterEach(() => {
    console.error = originalConsoleError;
    console.warn = originalConsoleWarn;
    console.log = originalConsoleLog;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvX190ZXN0c19fL3NldHVwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw2Q0FBNkM7QUFFN0MsbUNBQW1DO0FBQ25DLElBQUksQ0FBQyxJQUFJLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNsRCxvQkFBb0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN4RCxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtLQUNoQixDQUFDLENBQUM7SUFDSCxrQkFBa0IsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0NBQzlCLENBQUMsQ0FBQyxDQUFDO0FBRUosSUFBSSxDQUFDLElBQUksQ0FBQywrQkFBK0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELGtCQUFrQixFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFO0tBQ2hCLENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyxDQUFDO0FBRUosb0NBQW9DO0FBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztBQUM5QixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxXQUFXLENBQUM7QUFDckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsR0FBRyxZQUFZLENBQUM7QUFFcEQsd0JBQXdCO0FBQ3ZCLE1BQWMsQ0FBQyxtQkFBbUIsR0FBRyxDQUFDLFFBQWEsRUFBRSxFQUFFO0lBQ3RELE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztRQUMzQyxJQUFJLEVBQUUsSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN6RCxDQUFDLENBQUM7SUFFSCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDLENBQUM7QUFFRiw4REFBOEQ7QUFDOUQsTUFBTSxvQkFBb0IsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQzNDLE1BQU0sbUJBQW1CLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN6QyxNQUFNLGtCQUFrQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7QUFFdkMsVUFBVSxDQUFDLEdBQUcsRUFBRTtJQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQy9CLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzFCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQ3pCLE9BQU8sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQzFCLENBQUM7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUVILFNBQVMsQ0FBQyxHQUFHLEVBQUU7SUFDYixPQUFPLENBQUMsS0FBSyxHQUFHLG9CQUFvQixDQUFDO0lBQ3JDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsbUJBQW1CLENBQUM7SUFDbkMsT0FBTyxDQUFDLEdBQUcsR0FBRyxrQkFBa0IsQ0FBQztBQUNuQyxDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEplc3Qgc2V0dXAgZmlsZSBmb3IgYmVkcm9jay1hZ2VudHMgcGFja2FnZVxuXG4vLyBNb2NrIEFXUyBTREsgY2xpZW50cyBmb3IgdGVzdGluZ1xuamVzdC5tb2NrKCdAYXdzLXNkay9jbGllbnQtYmVkcm9jay1ydW50aW1lJywgKCkgPT4gKHtcbiAgQmVkcm9ja1J1bnRpbWVDbGllbnQ6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICBzZW5kOiBqZXN0LmZuKCksXG4gIH0pKSxcbiAgSW52b2tlTW9kZWxDb21tYW5kOiBqZXN0LmZuKCksXG59KSk7XG5cbmplc3QubW9jaygnQGF3cy1zZGsvY2xpZW50LWJlZHJvY2stYWdlbnQnLCAoKSA9PiAoe1xuICBCZWRyb2NrQWdlbnRDbGllbnQ6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gKHtcbiAgICBzZW5kOiBqZXN0LmZuKCksXG4gIH0pKSxcbn0pKTtcblxuLy8gU2V0IHVwIHRlc3QgZW52aXJvbm1lbnQgdmFyaWFibGVzXG5wcm9jZXNzLmVudi5OT0RFX0VOViA9ICd0ZXN0JztcbnByb2Nlc3MuZW52LkFXU19SRUdJT04gPSAndXMtZWFzdC0xJztcbnByb2Nlc3MuZW52LkJFRFJPQ0tfREVGQVVMVF9NT0RFTF9JRCA9ICdtb2NrLW1vZGVsJztcblxuLy8gR2xvYmFsIHRlc3QgdXRpbGl0aWVzXG4oZ2xvYmFsIGFzIGFueSkubW9ja0JlZHJvY2tSZXNwb25zZSA9IChyZXNwb25zZTogYW55KSA9PiB7XG4gIGNvbnN0IG1vY2tTZW5kID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHtcbiAgICBib2R5OiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoSlNPTi5zdHJpbmdpZnkocmVzcG9uc2UpKSxcbiAgfSk7XG4gIFxuICByZXR1cm4gbW9ja1NlbmQ7XG59O1xuXG4vLyBTdXBwcmVzcyBjb25zb2xlIGxvZ3MgZHVyaW5nIHRlc3RzIHVubGVzcyBleHBsaWNpdGx5IG5lZWRlZFxuY29uc3Qgb3JpZ2luYWxDb25zb2xlRXJyb3IgPSBjb25zb2xlLmVycm9yO1xuY29uc3Qgb3JpZ2luYWxDb25zb2xlV2FybiA9IGNvbnNvbGUud2FybjtcbmNvbnN0IG9yaWdpbmFsQ29uc29sZUxvZyA9IGNvbnNvbGUubG9nO1xuXG5iZWZvcmVFYWNoKCgpID0+IHtcbiAgaWYgKCFwcm9jZXNzLmVudi5WRVJCT1NFX1RFU1RTKSB7XG4gICAgY29uc29sZS5lcnJvciA9IGplc3QuZm4oKTtcbiAgICBjb25zb2xlLndhcm4gPSBqZXN0LmZuKCk7XG4gICAgY29uc29sZS5sb2cgPSBqZXN0LmZuKCk7XG4gIH1cbn0pO1xuXG5hZnRlckVhY2goKCkgPT4ge1xuICBjb25zb2xlLmVycm9yID0gb3JpZ2luYWxDb25zb2xlRXJyb3I7XG4gIGNvbnNvbGUud2FybiA9IG9yaWdpbmFsQ29uc29sZVdhcm47XG4gIGNvbnNvbGUubG9nID0gb3JpZ2luYWxDb25zb2xlTG9nO1xufSk7Il19