"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockSDXLProvider = void 0;
const client_bedrock_runtime_1 = require("@aws-sdk/client-bedrock-runtime");
class BedrockSDXLProvider {
    constructor(region, modelId) {
        const r = region || process.env.AWS_REGION || 'us-east-1';
        this.client = new client_bedrock_runtime_1.BedrockRuntimeClient({ region: r });
        this.modelId = modelId || process.env.BEDROCK_SDXL_MODEL || 'stability.stable-diffusion-xl-v1';
    }
    async generate(params) {
        const body = {
            text_prompts: [{ text: params.prompt }],
            cfg_scale: params.cfgScale ?? 10,
            steps: params.steps ?? 30,
            width: params.width ?? 1024,
            height: params.height ?? 1024,
            samples: params.count ?? 1,
        };
        const command = new client_bedrock_runtime_1.InvokeModelCommand({
            modelId: this.modelId,
            contentType: 'application/json',
            accept: 'application/json',
            body: JSON.stringify(body),
        });
        try {
            const res = await this.client.send(command);
            if (!res.body)
                return [];
            const json = JSON.parse(new TextDecoder().decode(res.body));
            const artifacts = Array.isArray(json.artifacts) ? json.artifacts : [];
            return artifacts.map((a) => ({ imageBase64: a.base64 }));
        }
        catch {
            return [];
        }
    }
}
exports.BedrockSDXLProvider = BedrockSDXLProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVkcm9jay1zZHhsLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy9iZWRyb2NrLXNkeGwtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNEVBQTJGO0FBZTNGLE1BQWEsbUJBQW1CO0lBSTlCLFlBQVksTUFBZSxFQUFFLE9BQWdCO1FBQzNDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxXQUFXLENBQUM7UUFDMUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLDZDQUFvQixDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxrQ0FBa0MsQ0FBQztJQUNqRyxDQUFDO0lBRUQsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUF5QjtRQUN0QyxNQUFNLElBQUksR0FBRztZQUNYLFlBQVksRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN2QyxTQUFTLEVBQUUsTUFBTSxDQUFDLFFBQVEsSUFBSSxFQUFFO1lBQ2hDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDekIsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLElBQUksSUFBSTtZQUMzQixNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sSUFBSSxJQUFJO1lBQzdCLE9BQU8sRUFBRSxNQUFNLENBQUMsS0FBSyxJQUFJLENBQUM7U0FDM0IsQ0FBQztRQUVGLE1BQU0sT0FBTyxHQUFHLElBQUksMkNBQWtCLENBQUM7WUFDckMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQ3JCLFdBQVcsRUFBRSxrQkFBa0I7WUFDL0IsTUFBTSxFQUFFLGtCQUFrQjtZQUMxQixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7U0FDM0IsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDO1lBQ0gsTUFBTSxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1QyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUk7Z0JBQUUsT0FBTyxFQUFFLENBQUM7WUFDekIsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM1RCxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3RFLE9BQU8sU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLENBQUM7UUFBQyxNQUFNLENBQUM7WUFDUCxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFyQ0Qsa0RBcUNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmVkcm9ja1J1bnRpbWVDbGllbnQsIEludm9rZU1vZGVsQ29tbWFuZCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1iZWRyb2NrLXJ1bnRpbWUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJlZHJvY2tTRFhMUGFyYW1zIHtcbiAgcHJvbXB0OiBzdHJpbmc7XG4gIHN0ZXBzPzogbnVtYmVyO1xuICBjZmdTY2FsZT86IG51bWJlcjtcbiAgd2lkdGg/OiBudW1iZXI7XG4gIGhlaWdodD86IG51bWJlcjtcbiAgY291bnQ/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJhdGVkSW1hZ2Uge1xuICBpbWFnZUJhc2U2NDogc3RyaW5nO1xufVxuXG5leHBvcnQgY2xhc3MgQmVkcm9ja1NEWExQcm92aWRlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50OiBCZWRyb2NrUnVudGltZUNsaWVudDtcbiAgcHJpdmF0ZSByZWFkb25seSBtb2RlbElkOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocmVnaW9uPzogc3RyaW5nLCBtb2RlbElkPzogc3RyaW5nKSB7XG4gICAgY29uc3QgciA9IHJlZ2lvbiB8fCBwcm9jZXNzLmVudi5BV1NfUkVHSU9OIHx8ICd1cy1lYXN0LTEnO1xuICAgIHRoaXMuY2xpZW50ID0gbmV3IEJlZHJvY2tSdW50aW1lQ2xpZW50KHsgcmVnaW9uOiByIH0pO1xuICAgIHRoaXMubW9kZWxJZCA9IG1vZGVsSWQgfHwgcHJvY2Vzcy5lbnYuQkVEUk9DS19TRFhMX01PREVMIHx8ICdzdGFiaWxpdHkuc3RhYmxlLWRpZmZ1c2lvbi14bC12MSc7XG4gIH1cblxuICBhc3luYyBnZW5lcmF0ZShwYXJhbXM6IEJlZHJvY2tTRFhMUGFyYW1zKTogUHJvbWlzZTxHZW5lcmF0ZWRJbWFnZVtdPiB7XG4gICAgY29uc3QgYm9keSA9IHtcbiAgICAgIHRleHRfcHJvbXB0czogW3sgdGV4dDogcGFyYW1zLnByb21wdCB9XSxcbiAgICAgIGNmZ19zY2FsZTogcGFyYW1zLmNmZ1NjYWxlID8/IDEwLFxuICAgICAgc3RlcHM6IHBhcmFtcy5zdGVwcyA/PyAzMCxcbiAgICAgIHdpZHRoOiBwYXJhbXMud2lkdGggPz8gMTAyNCxcbiAgICAgIGhlaWdodDogcGFyYW1zLmhlaWdodCA/PyAxMDI0LFxuICAgICAgc2FtcGxlczogcGFyYW1zLmNvdW50ID8/IDEsXG4gICAgfTtcblxuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgSW52b2tlTW9kZWxDb21tYW5kKHtcbiAgICAgIG1vZGVsSWQ6IHRoaXMubW9kZWxJZCxcbiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICBhY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxuICAgIH0pO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY2xpZW50LnNlbmQoY29tbWFuZCk7XG4gICAgICBpZiAoIXJlcy5ib2R5KSByZXR1cm4gW107XG4gICAgICBjb25zdCBqc29uID0gSlNPTi5wYXJzZShuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUocmVzLmJvZHkpKTtcbiAgICAgIGNvbnN0IGFydGlmYWN0cyA9IEFycmF5LmlzQXJyYXkoanNvbi5hcnRpZmFjdHMpID8ganNvbi5hcnRpZmFjdHMgOiBbXTtcbiAgICAgIHJldHVybiBhcnRpZmFjdHMubWFwKChhOiBhbnkpID0+ICh7IGltYWdlQmFzZTY0OiBhLmJhc2U2NCB9KSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG59XG5cbiJdfQ==